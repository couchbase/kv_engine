/**
 * //// stat_definitions.json
 *
 * stat_definitions.json contains definitions of the form:
 *
 * {
 * "key": "unique_enum_key",
 * "unit": "none",
 * "cbstat": "key_used_for_cbstats_{format_arg}",
 * "type": "counter",
 * "prometheus": {
 *     "family": "metric_family",
 *     "labels": {
 *         "label_key": "label_value"
 *     }
 * }
 * "added": "7.0.0"
 * },
 *
 * * "key"
 *    globally unique key, used when adding stats to a collector:
 *     collector.addStat(Key::foobar, value);
 *
 * * "unit"
 *    name of a cb::stats::unit declaration, e.g., "bytes", "microseconds".
 *    see statistics/units.h for all values.
 *    Indicates what the internally tracked value represents.
 *    This is used to add the appropriate suffix to the Prometheus metric
 *    family ("..._bytes", "..._seconds") and scale the recorded value to the
 *    base unit required by Prometheus (nanoseconds -> seconds,
 *    kilobytes->bytes)
 *
 * * "cbstat"
 *    If set to false, this metric will not be exposed over cbstats.
 *
 *    If the key used for cbstats needs to be different than the enum
 *    e.g., has unacceptable characters, or needs formatting at runtime,
 *    it may be overriden here.
 *    For example:
 *     {
 *     "key": "vb_num",
 *     "unit": "none",
 *     "cbstat": "vb_{state}_num",
 *     "prometheus": {
 *         "family": "num_vbuckets"
 *     }
 *     },
 *    Uses a runtime "state" label in the cbstat key.
 *    The same stat may be added with a different state label:
 *     collector.withLabel("state", "active").addStat(Key::vb_num, value);
 *     collector.withLabel("state", "replica").addStat(Key::vb_num, otherValue);
 *    For Prometheus, this results in multiple time series under the family
 *    "num_vbuckets", with differing labels.
 *    CBstats instead needs to format the key "vb_{state}_num" to get back to
 *    a unique value, "vb_active_num", "vb_replica_num".
 *
 * * "type"
 *    Prometheus metric type, one of:
 *        "untyped", "counter", "gauge", "histogram", "summary"
 *    Optional.
 *    If specified, Prometheus exposition will verify that a metric declared
 *    as a counter/gauge is not provided e.g., a HdrHistogram to expose.
 *    If not specified, defaults to "untyped" or "histogram", based on the
 *    actual datatype added to the StatCollector.
 *    Can typically be omitted, as it is largely informational in Prometheus
 *    anyway.
 *
 * * "prometheus"
 *    If set to false, this metric will not be exposed for prometheus.
 *    otherwise, object containing "family", "labels" keys, both optional.
 * ** "family"
 *    If absent, defaults to the value of "key".
 *    A non-unique metric family name. Several metrics can share the same
 *    metric family name, with differing labels:
 *    foobar{label="value"}
 *    foobar{label="value2"}
 * ** "labels"
 *    Fixed labels which distinguish this stat from others in the metric family.
 *    More labels may be added at runtime, but where a label is always fixed
 *    ahead of time, it should be specified here. If a metrics family has
 *    multiple definitions with different fixed labels, a separate description
 *    for the family must be added: { family: string, description: string }.
 *
 * *  "added"
 *    Release version in which this metric was added. Required for metrics
 *    documentation. 7.0.0 is the earliest valid value, as that is the version
 *    Prometheus exposition was introduced. All metrics from before this version
 *    are considered "added in 7.0.0".
 *
 * *  "stability"
 *    One of:
 *        "committed", "volatile", "internal"
 *    Optional, defaults to "comitted" if absent.
 *    Used for documentation purposes.
 *    "committed" metrics are expected to be stable over time, and be
 *    deprecated before removal.
 *    "volatile" metrics will be documented, but with an advisory that
 *    they may change.
 *    "internal" metrics will not be publicly documented.
 *
 * *  "deprecated"
 *    Release version in which the metric will be deprecated.
 *    If present, the notes attribute should include a sentence indicating how clients
 *    should adapt and move away from using this metric.
 *    Optional. Not added in metrics_metadata.json if not present (or empty).
 *
 * *  "notes"
 *    End-user understandable notes and comments relating to this metric.
 *    Optional. Not added in metrics_metadata.json if not present (or empty).
 *
 * //// cb::stats::Key
 *
 * generated_stats.h declares an enum containing every "key" from the json.
 *   namespace cb::stats {
 *   enum class Key {
 *   default_evictions,
 *   default_curr_items,
 *   ...
 *
 * This enum is used when adding stats to a collector:
 * collector.addStats(Key::default_evictions, value);
 *
 * The underlying collector impl (cbstat or prometheus) will use the relevant
 * information from the definitions in the json file.
 *
 *
 * //// Examples
 * * minimal CBStats-only metric
 *     {
 *     "key": "some_unique_key",
 *     "unit": "none", // unit is only informational for cbstats
 *     "prometheus": false
 *     },
 *  the cbstat key will default to the enum key as it has not been overriden.
 * * minimal Prometheus-only metric
 *    {
 *    "key": "cmd_duration",
 *    "unit": "microseconds",
 *    "cbstat": false
 *    }
 *  the metric family defaults to the enum key, and no additional hard-coded
 *  labels are present (though more may be added at runtime, like the "bucket"
 *  label).
 */



[
/* default_engine stats */
    {
        "key": "default_evictions",
        "description": "Number of items evicted from the bucket",
        "unit": "none",
        "cbstat": "evictions",
        "prometheus": {
            "family": "memcache_evictions"
        },
        "added": "7.0.0"
    },
    {
        "key": "default_curr_items",
        "unit": "none",
        "cbstat": "curr_items",
        "prometheus": {
            "family": "memcache_curr_items"
        },
        "description": "Number of active items in memory",
        "added": "7.0.0"
    },
    {
        "key": "default_total_items",
        "description": "Total number of items in the bucket",
        "unit": "none",
        "cbstat": "total_items",
        "prometheus": {
            "family": "memcache_total_items"
        },
        "added": "7.0.0"
    },
    {
        "key": "default_bytes",
        "unit": "bytes",
        "cbstat": "bytes",
        "prometheus": {
            "family": "memcache_mem_size"
        },
        "description": "Engine's total memory usage",
        "added": "7.0.0"
    },
    {
        "key": "default_reclaimed",
        "description": "Number of items allocated by reusing expired objects",
        "unit": "none",
        "cbstat": "reclaimed",
        "prometheus": {
            "family": "memcache_reclaimed"
        },
        "added": "7.0.0"
    },
    {
        "key": "default_engine_maxbytes",
        "description": "The max size of the bucket",
        "unit": "none",
        "cbstat": "engine_maxbytes",
        "prometheus": {
            "family": "memcache_engine_maxbytes"
        },
        "added": "7.0.0"
    },
/* TODO: applying a "kv_" prefix globally would be consistent but lead to kv_ep_
 *  for some stats. Providing metric family names without ep_ would avoid this
 * "All" stats group (doEngineStats)
 */
    {
        "key": "ep_num_workers",
        "unit": "none",
        "description": "Global number of shared worker threads",
        "added": "7.0.0"
    },
    {
        "key": "ep_bucket_priority",
        "unit": "none",
        "description": "Priority assigned to the bucket",
        "prometheus": false,
        "added": "7.0.0"
    },
/* TODO: make 0/1 rather than text for Prometheus? */
    {
        "key": "ep_total_enqueued",
        "unit": "none",
        "description": "Total number of items queued for persistence",
        "added": "7.0.0"
    },
    {
        "key": "ep_total_deduplicated",
        "unit": "none",
        "description": "Total number of items de-duplicated when queued to CheckpointManager",
        "added": "7.0.0"
    },
    {
        "key": "ep_total_deduplicated_flusher",
        "unit": "none",
        "description": "Total number of items de-duplicated when flushed to disk",
        "added": "7.2.0"
    },
    {
        "key": "ep_expired_access",
        "unit": "none",
        "description": "Number of times an item was expired on application access",
        "added": "7.0.0"
    },
    {
        "key": "ep_expired_compactor",
        "unit": "none",
        "description": "Number of times an item was expired by the compactor",
        "added": "7.0.0"
    },
    {
        "key": "ep_expired_pager",
        "unit": "none",
        "description": "Number of times an item was expired by the item pager",
        "added": "7.0.0"
    },
    {
        "key": "ep_queue_size",
        "unit": "none",
        "description": "Number of items queued for storage",
        "added": "7.0.0"
    },
    {
        "key": "ep_diskqueue_items",
        "unit": "none",
        "description": "Total items in disk queue",
        "added": "7.0.0"
    },
    {
        "key": "ep_commit_num",
        "unit": "none",
        "description": "Total number of write commits",
        "added": "7.0.0"
    },
    {
        "key": "ep_commit_time",
        "unit": "microseconds",
        "description": "Number of milliseconds of most recent commit",
        "added": "7.0.0"
    },
    {
        "key": "ep_commit_time_total",
        "unit": "microseconds",
        "description": "Cumulative milliseconds spent committing",
        "added": "7.0.0"
    },
    {
        "key": "ep_item_begin_failed",
        "unit": "none",
        "description": "Number of times a transaction failed to start due to storage errors",
        "added": "7.0.0"
    },
    {
        "key": "ep_item_commit_failed",
        "unit": "none",
        "description": "Number of times a transaction failed to commit due to storage errors",
        "added": "7.0.0"
    },
    {
        "key": "ep_item_flush_expired",
        "unit": "none",
        "description": "Number of times an item is not flushed due to the expiry of the item",
        "added": "7.0.0"
    },
    {
        "key": "ep_item_flush_failed",
        "unit": "none",
        "description": "Number of times an item failed to flush due to storage errors",
        "added": "7.0.0"
    },
    {
        "key": "ep_flusher_state",
        "unit": "none",
        "description": "Current state of the flusher thread",
        "prometheus": false,
        "added": "7.0.0"
    },
    {
        "key": "ep_flusher_todo",
        "unit": "none",
        "description": "Number of items currently being written",
        "added": "7.0.0"
    },
    {
        "key": "ep_total_persisted",
        "unit": "none",
        "description": "Total number of items persisted",
        "added": "7.0.0"
    },
    {
        "key": "ep_uncommitted_items",
        "unit": "none",
        "description": "The amount of items that have not been written to disk",
        "added": "7.0.0"
    },
    {
        "key": "ep_vbucket_del",
        "unit": "none",
        "description": "Number of vbucket deletion events",
        "added": "7.0.0"
    },
    {
        "key": "ep_vbucket_del_fail",
        "unit": "none",
        "description": "Number of failed vbucket deletion events",
        "added": "7.0.0"
    },
    {
        "key": "ep_flush_duration_total",
        "unit": "milliseconds",
        "description": "Cumulative milliseconds spent flushing",
        "added": "7.0.0"
    },
    {
        "key": "ep_persist_vbstate_total",
        "unit": "none",
        "description": "Total VB persist state to disk",
        "added": "7.0.0"
    },
    {
        "key": "mem_used",
        "unit": "bytes",
        "description": "Engine's total memory usage",
        "added": "7.0.0"
    },
    {
        "family": "domain_memory_used",
        "unit": "bytes",
        "description": "Current memory used in KV for primary/secondary domain"
    },
    {
        "key": "mem_used_primary",
        "unit": "bytes",
        "description": "Current memory used in KV for primary/secondary domain",
        "prometheus": {
            "family": "domain_memory_used",
            "labels": {
                "domain": "primary"
            }
        },
        "added": "7.1.0"
    },
    {
        "key": "mem_used_secondary",
        "unit": "bytes",
        "description": "Current memory used in KV for primary/secondary domain",
        "prometheus": {
            "family": "domain_memory_used",
            "labels": {
                "domain": "secondary"
            }
        },
        "added": "7.1.0"
    },
    {
        "key": "mem_used_estimate",
        "unit": "bytes",
        "description": "Engine's total estimated memory usage (this is a faster stat to read, but lags mem_used as it's only updated when a threshold is crossed see mem_used_merge_threshold)",
        "added": "7.0.0"
    },
    {
        "key": "ep_arena_memory_allocated",
        "unit": "bytes",
        "description": "The total memory allocated from the engine's arena",
        "added": "7.6.0"
    },
    {
        "key": "ep_arena_memory_resident",
        "unit": "bytes",
        "description": "The resident set size of the engine's arena",
        "added": "7.6.0"
    },
/* TODO: it's not advised to have metric like:
 *   my_metric{label=a} 1
 *   my_metric{label=b} 6
 *   my_metric{label=total} 7
 *  as a total is inconvenient for aggregation, _but_ we do track
 * several stats which are logically totals which might include things _not_
 * available under any other metric. Exposing it under a different metric name
 * seems best. Note: "..._total" is expected to be reserved for Counters -
 * totals over time, not totals of other things.
 */
    {
        "key": "bytes",
        "unit": "bytes",
        "prometheus": {
            "family": "total_memory_used"
        },
        "description": "Engine's total memory usage",
        "added": "7.0.0"
    },
    {
        "key": "ep_kv_size",
        "unit": "bytes",
        "prometheus": {
            "family": "ep_key_value_size"
        },
        "description": "Memory used to store items metadata, keys and values in the system, no matter the vbucket's state",
        "added": "7.0.0"
    },
    {
        "key": "ep_blob_num",
        "unit": "none",
        "description": "The number of blob objects in the cache",
        "added": "7.0.0"
    },
    {
        "key": "ep_blob_num_allocated_total",
        "unit": "none",
        "type": "counter",
        "description": "The number of blob object allocations",
        "added": "7.6.0"
    },
    {
        "key": "ep_blob_num_freed_total",
        "unit": "none",
        "type": "counter",
        "description": "The number of blob object deallocations",
        "added": "7.6.0"
    },
    {
        "family": "memory_overhead",
        "unit": "bytes",
        "description": "The \"unused\" memory caused by the allocator returning bigger chunks than requested"
    },
    {
        "key": "ep_blob_overhead",
        "unit": "bytes",
        "prometheus": {
            "family": "memory_overhead",
            "labels": {
                "for": "blobs"
            }
        },
        "description": "The \"unused\" memory caused by the allocator returning bigger chunks than requested",
        "added": "7.0.0"
    },
    {
        "family": "memory_used",
        "unit": "bytes",
        "description": "Memory used for various objects"
    },
/* TODO: Assess what labels would actually be _useful_ for querying */
    {
        "key": "ep_value_size",
        "unit": "bytes",
        "prometheus": {
            "family": "memory_used",
            "labels": {
                "for": "blobs"
            }
        },
        "description": "Memory used to store values for resident keys",
        "added": "7.0.0"
    },
    {
        "key": "ep_value_size_allocated_total",
        "unit": "bytes",
        "type": "counter",
        "description": "The total number of bytes ever allocated for blob objects",
        "added": "7.6.0"
    },
    {
        "key": "ep_value_size_freed_total",
        "unit": "bytes",
        "type": "counter",
        "description": "The total number of bytes ever freed by deallocated blob objects",
        "added": "7.6.0"
    },
    {
        "key": "ep_storedval_size",
        "unit": "bytes",
        "prometheus": {
            "family": "memory_used",
            "labels": {
                "for": "storedvalues"
            }
        },
        "description": "Memory used by storedval objects",
        "added": "7.0.0"
    },
    {
        "key": "ep_storedval_size_allocated_total",
        "unit": "bytes",
        "type": "counter",
        "description": "The total number of bytes ever allocated for storedval objects",
        "added": "7.6.0"
    },
    {
        "key": "ep_storedval_size_freed_total",
        "unit": "bytes",
        "type": "counter",
        "description": "The total number of bytes ever freed by deallocated storedval objects",
        "added": "7.6.0"
    },
    {
        "key": "ep_storedval_overhead",
        "unit": "bytes",
        "prometheus": {
            "family": "memory_overhead",
            "labels": {
                "for": "storedvalues"
            }
        },
        "description": "The \"unused\" memory caused by the allocator returning bigger chunks than requested",
        "added": "7.0.0"
    },
    {
        "key": "ep_storedval_num",
        "unit": "none",
        "description": "The number of storedval objects allocated",
        "added": "7.0.0"
    },
    {
        "key": "ep_storedval_num_allocated_total",
        "unit": "none",
        "type": "counter",
        "description": "The number of storedval object allocations",
        "added": "7.6.0"
    },
    {
        "key": "ep_storedval_num_freed_total",
        "unit": "none",
        "type": "counter",
        "description": "The number of blob object deallocations",
        "added": "7.6.0"
    },
    {
        "key": "ep_overhead",
        "unit": "bytes",
        "prometheus": {
            "family": "total_memory_overhead"
        },
        "description": "Extra memory used by transient data like persistence queue, replication queues, checkpoints, etc",
        "added": "7.0.0"
    },
    {
        "key": "ep_item_num",
        "unit": "none",
        "description": "The number of item objects allocated",
        "added": "7.0.0"
    },
    {
        "key": "ep_item_num_allocated_total",
        "unit": "none",
        "type": "counter",
        "description": "The number of item object allocations",
        "added": "7.6.0"
    },
    {
        "key": "ep_item_num_freed_total",
        "unit": "none",
        "type": "counter",
        "description": "The number of item object deallocations",
        "added": "7.6.0"
    },
    {
        "key": "ep_oom_errors",
        "unit": "none",
        "description": "Number of times unrecoverable OOMs happened while processing operations",
        "added": "7.0.0"
    },
    {
        "key": "ep_tmp_oom_errors",
        "unit": "none",
        "type": "counter",
        "description": "Number of times temporary OOMs happened while processing operations",
        "added": "7.0.0"
    },
    {
        "key": "ep_mem_tracker_enabled",
        "unit": "none",
        "description": "True if memory usage tracker is enabled",
        "added": "7.0.0"
    },
    {
        "key": "ep_bg_fetched",
        "unit": "none",
        "description": "Number of items fetched from disk",
        "type": "counter",
        "added": "7.0.0"
    },
    {
        "key": "ep_bg_meta_fetched",
        "unit": "none",
        "description": "Number of metadata fetches from disk",
        "type": "counter",
        "added": "7.0.0"
    },
    {
        "key": "ep_bg_remaining_items",
        "unit": "none",
        "description": "Number of remaining bg fetch items",
        "added": "7.0.0"
    },
    {
        "key": "ep_bg_remaining_jobs",
        "unit": "none",
        "description": "Number of remaining bg fetch jobs",
        "added": "7.0.0"
    },
    {
        "key": "ep_num_pager_runs",
        "unit": "none",
        "type": "counter",
        "description": "Number of times we ran pager loops to seek additional memory",
        "added": "7.0.0"
    },
    {
        "key": "ep_num_expiry_pager_runs",
        "unit": "none",
        "type": "counter",
        "description": "Number of times we ran expiry pager loops to purge expired items from memory/disk",
        "added": "7.0.0"
    },
    {
        "key": "ep_num_freq_decayer_runs",
        "unit": "none",
        "type": "counter",
        "description": "Number of times we ran the freq decayer task because a frequency counter has become saturated",
        "added": "7.0.0"
    },
    {
        "key": "ep_items_expelled_from_checkpoints",
        "unit": "none",
        "type": "counter",
        "description": "Number of items expelled from checkpoints. Expelled refers to items that have been ejected from memory but are still considered to be part of the checkpoint.",
        "added": "7.0.0"
    },
    {
        "key": "ep_items_rm_from_checkpoints",
        "unit": "none",
        "type": "counter",
        "description": "Number of items removed from closed unreferenced checkpoints",
        "added": "7.0.0"
    },
    {
        "key": "ep_num_value_ejects",
        "unit": "none",
        "type": "counter",
        "description": "Number of times item values got ejected from memory to disk",
        "added": "7.0.0"
    },
    {
        "key": "ep_num_eject_failures",
        "unit": "none",
        "type": "counter",
        "description": "Number of items that could not be ejected",
        "added": "7.0.0"
    },
    {
        "key": "ep_num_not_my_vbuckets",
        "unit": "none",
        "type": "counter",
        "description": "Number of times Not My VBucket exception happened during runtime",
        "added": "7.0.0"
    },
    {
        "key": "ep_pending_ops",
        "unit": "none",
        "type": "gauge",
        "description": "Number of ops awaiting pending vbuckets",
        "added": "7.0.0"
    },
    {
        "key": "ep_pending_ops_total",
        "unit": "none",
        "type": "counter",
        "description": "Total blocked pending ops since reset",
        "added": "7.0.0"
    },
/* TODO: are total-over-uptime stats relevant for prometheus
 *  given the ability to sum over a time period?
 */
    {
        "key": "ep_pending_ops_max",
        "unit": "none",
        "description": "Max ops seen awaiting 1 pending vbucket",
        "added": "7.0.0"
    },
/* TODO: standardise labelling for "high watermark" style stats */
    {
        "key": "ep_pending_ops_max_duration",
        "unit": "microseconds",
        "description": "Max time (\u00b5s) used waiting on pending vbuckets",
        "added": "7.0.0"
    },
    {
        "key": "ep_pending_compactions",
        "unit": "none",
        "description": "For persistent buckets, the count of compaction tasks.",
        "added": "7.0.0"
    },
    {
        "key": "ep_compaction_failed",
        "unit": "none",
        "description": "Counter of how many times compaction has failed, e.g. a system call error caused compaction to fail",
        "added": "7.1.0"
    },
    {
        "key": "ep_compaction_aborted",
        "unit": "none",
        "description": "Counter of how many times compaction aborted, e.g. the vbucket is required to rollback, so compaction is aborted",
        "added": "7.1.0"
    },
    {
        "key": "ep_rollback_count",
        "unit": "none",
        "description": "Number of rollbacks on consumer",
        "added": "7.0.0"
    },
    {
        "key": "ep_vbucket_del_max_walltime",
        "unit": "microseconds",
        "description": "Max wall time (\u00b5s) spent by deleting a vbucket",
        "added": "7.0.0"
    },
    {
        "key": "ep_vbucket_del_avg_walltime",
        "unit": "microseconds",
        "description": "Avg wall time (\u00b5s) spent by deleting a vbucket",
        "added": "7.0.0"
    },
    {
        "key": "ep_bg_num_samples",
        "unit": "none",
        "description": "The number of samples included in the average",
        "added": "7.0.0"
    },
    {
        "key": "ep_bg_min_wait",
        "unit": "microseconds",
        "description": "The shortest time in the queue waiting to be loaded from disk",
        "added": "7.0.0"
    },
    {
        "key": "ep_bg_max_wait",
        "unit": "microseconds",
        "description": "The longest time in the queue waiting to be loaded from disk",
        "added": "7.0.0"
    },
    {
        "key": "ep_bg_wait_avg",
        "unit": "microseconds",
        "description": "The average wait time for an item before it's serviced by the dispatcher",
        "added": "7.0.0"
    },
/* TODO: derived from two stats. Decide
 *  whether to expose for prometheus
 */
    {
        "key": "ep_bg_min_load",
        "unit": "microseconds",
        "description": "The shortest load time when loading from disk",
        "added": "7.0.0"
    },
    {
        "key": "ep_bg_max_load",
        "unit": "microseconds",
        "description": "The longest load time when loading from disk",
        "added": "7.0.0"
    },
    {
        "key": "ep_bg_load_avg",
        "unit": "microseconds",
        "description": "The average time for an item to be loaded from disk",
        "added": "7.0.0"
    },
/* TODO: derived from two stats. Decide
 *  whether to expose for prometheus
 */
    {
        "key": "ep_bg_wait",
        "unit": "microseconds",
        "description": "The total elapse time for the wait queue",
        "added": "7.0.0"
    },
    {
        "key": "ep_bg_load",
        "unit": "microseconds",
        "description": "The total elapsed time for items to be loaded from disk",
        "type": "counter",
        "added": "7.0.0"
    },
    {
        "key": "ep_degraded_mode",
        "unit": "none",
        "description": "True if the engine is either warming up or data traffic is disabled",
        "added": "7.0.0"
    },
    {
        "key": "ep_num_access_scanner_runs",
        "unit": "none",
        "description": "Number of times we ran accesss scanner to snapshot working set",
        "added": "7.0.0"
    },
    {
        "key": "ep_num_access_scanner_skips",
        "unit": "none",
        "description": "Number of times accesss scanner task decided not to generate access log",
        "added": "7.0.0"
    },
    {
        "key": "ep_access_scanner_last_runtime",
        "unit": "seconds",
        "description": "Number of seconds that last Access Scanner task run took to complete.",
        "added": "7.0.0"
    },
/* TODO: relative to server start. Convert to absolute time? */
    {
        "key": "ep_access_scanner_num_items",
        "unit": "none",
        "description": "Number of items that last Access Scanner task run wrote to the Access Log.",
        "added": "7.0.0"
    },
    {
        "key": "ep_access_scanner_task_time",
        "unit": "none",
        "description": "Time of the next access scanner task (GMT), NOT_SCHEDULED if access scanner has been disabled",
        "added": "7.0.0"
    },
/* TODO: this is a string, expose numeric time for Prometheus */
    {
        "key": "ep_expiry_pager_task_time",
        "unit": "none",
        "description": "Time of the next expiry pager task (GMT), NOT_SCHEDULED if expiry pager has been disabled",
        "added": "7.0.0"
    },
/* TODO: this is a string, expose numeric time for Prometheus */
    {
        "key": "ep_startup_time",
        "unit": "seconds",
        "description": "System-generated engine startup time",
        "added": "7.0.0"
    },
    {
        "key": "ep_secondary_warmup_status",
        "unit": "none",
        "description": "Status of secondary warmup (complete or running)",
        "prometheus": false,
        "added": "8.0.0"
    },
    {
        "key": "ep_secondary_warmup_state",
        "unit": "none",
        "description": "The state reached by secondary warmup",
        "prometheus": false,
        "added": "8.0.0"
    },
    {
        "key": "ep_secondary_warmup_time",
        "unit": "microseconds",
        "description": "Time (\u00b5s) spent by warming data during Secondary warm-up",
        "prometheus": false,
        "added": "8.0.0"
    },
    {
        "key": "ep_secondary_warmup_keys_time",
        "unit": "microseconds",
        "description": "Time (\u00b5s) spent by warming keys",
        "prometheus": false,
        "added": "8.0.0"
    },
    {
        "key": "ep_secondary_warmup_access_log",
        "unit": "none",
        "description":"Stat only reported if secondary warmup encountered a corrupt access log",
        "prometheus": false,
        "added": "8.0.0"
    },
    {
        "key": "ep_secondary_warmup_estimated_value_count",
        "unit": "none",
        "description":"To facilitate warm-up progress tracking this value represents how many values need to be loaded to reach 100% of values loaded. This counter is only initialised when warm-up reaches the \"loading access log\", \"loading k/v pairs\" or \"loading data\" state and the ratio of ep_warmup_value_count and this provides insight into progress.",
        "prometheus": false,
        "added": "8.0.0"
    },
    {
        "key": "ep_warmup_thread",
        "unit": "none",
        "description": "Warmup thread status",
        "added": "7.0.0"
    },
    {
        "key": "ep_warmup_time",
        "unit": "microseconds",
        "description": "Time (\u00b5s) spent by warming data during Primary warm-up",
        "added": "7.0.0"
    },
    {
        "key": "ep_warmup_oom",
        "unit": "none",
        "description": "OOMs encountered during warmup",
        "added": "7.0.0"
    },
    {
        "key": "ep_warmup_dups",
        "unit": "none",
        "description": "Duplicates encountered during warmup",
        "added": "7.0.0"
    },
    {
        "key": "ep_warmup_state",
        "unit": "none",
        "description": "The current state of the warmup thread",
        "prometheus": false,
        "added": "7.1.0"
    },
    {
        "key": "ep_warmup_status",
        "unit": "none",
        "description": "The current status of the warmup thread",
        "cbstat": false,
        "added": "7.2.0"
    },
    {
        "key": "ep_warmup_key_count",
        "unit": "none",
        "description": "Number of keys warmed up",
        "prometheus": false,
        "added": "7.1.0"
    },
    {
        "key": "ep_warmup_value_count",
        "unit": "none",
        "description": "Number of values warmed up",
        "prometheus": false,
        "added": "7.1.0"
    },
    {
        "key": "ep_warmup_keys_time",
        "unit": "microseconds",
        "description": "Time (\u00b5s) spent by warming keys",
        "prometheus": false,
        "added": "7.1.0"
    },
    {
        "key": "ep_warmup_estimated_key_count",
        "unit": "none",
        "description":"To facilitate warm-up progress tracking this value represents how many keys need to be loaded to reach 100% keys loaded. This count is useful for progress tracking for Value Eviction buckets during the \"loading keys\" state and the ratio of ep_warmup_key_count and this provides insight into progress.",
        "prometheus": false,
        "added": "7.1.0"
    },
    {
        "key": "ep_warmup_estimate_time",
        "unit": "microseconds",
        "description": "Total time spent in the estimate item count phase of warmup",
        "prometheus": false,
        "added": "7.1.0"
    },
    {
        "key": "ep_warmup_access_log",
        "unit": "none",
        "description": "Stat only reported if warmup encountered a corrupt access log",
        "prometheus": false,
        "added": "7.1.0"
    },
    {
        "key": "ep_warmup_estimated_value_count",
        "unit": "none",
        "description":"To facilitate warm-up progress tracking this value represents how many values need to be loaded to reach 100% of values loaded. This counter is only initialised when warm-up reaches the \"loading access log\", \"loading k/v pairs\" or \"loading data\" state and the ratio of ep_warmup_value_count and this provides insight into progress.",
        "prometheus": false,
        "added": "7.1.0"
    },
    {
        "family": "ops",
        "unit": "none",
        "description": "Number of operations"
    },
    {
        "key": "ep_num_ops_get_meta",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "get_meta"
            }
        },
        "description": "Number of getMeta operations",
        "added": "7.0.0"
    },
    {
        "key": "ep_num_ops_set_meta",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "set_meta"
            }
        },
        "description": "Number of setWithMeta operations",
        "added": "7.0.0"
    },
    {
        "key": "ep_num_ops_del_meta",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "del_meta"
            }
        },
        "description": "Number of delWithMeta operations",
        "added": "7.0.0"
    },
    {
        "family": "ops_failed",
        "unit": "none",
        "description": "Number of operations failed due to conflict resolution"
    },
    {
        "key": "ep_num_ops_set_meta_res_fail",
        "unit": "none",
        "prometheus": {
            "family": "ops_failed",
            "labels": {
                "op": "set_meta"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "ep_num_ops_del_meta_res_fail",
        "unit": "none",
        "prometheus": {
            "family": "ops_failed",
            "labels": {
                "op": "del_meta"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "ep_num_ops_set_ret_meta",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "set_ret_meta"
            }
        },
        "description": "Number of setRetMeta operations",
        "added": "7.0.0"
    },
    {
        "key": "ep_num_ops_del_ret_meta",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "del_ret_meta"
            }
        },
        "description": "Number of delRetMeta operations",
        "added": "7.0.0"
    },
    {
        "key": "ep_num_ops_get_meta_on_set_meta",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "get_meta_for_set_meta"
            }
        },
        "description": "Num of background getMeta operations spawn due to setWithMeta operations",
        "added": "7.0.0"
    },
    {
        "key": "ep_workload_pattern",
        "unit": "none",
        "description": "Workload pattern (mixed, read_heavy, write_heavy) monitored at runtime",
        "prometheus": false,
        "added": "7.0.0"
    },
    {
        "key": "ep_defragmenter_num_visited",
        "unit": "none",
        "description": "Number of items visited (considered for defragmentation) by the defragmenter task.",
        "added": "7.0.0"
    },
    {
        "key": "ep_defragmenter_num_moved",
        "unit": "none",
        "description": "Number of items moved by the defragmentater task.",
        "added": "7.0.0"
    },
    {
        "key": "ep_defragmenter_sv_num_moved",
        "unit": "none",
        "description": "Number of StoredValues moved by the defragmentater task.",
        "added": "7.0.0"
    },
    {
        "key": "ep_defragmenter_sleep_time",
        "unit": "seconds",
        "description": "The amount of time the defragmenter task will sleep before it is scheduled to run again.",
        "added": "7.6.0"
    },
    {
        "key": "ep_item_compressor_num_visited",
        "unit": "none",
        "description": "Number of items visited (considered for compression) by the item compressor task.",
        "added": "7.0.0"
    },
    {
        "key": "ep_item_compressor_num_compressed",
        "unit": "none",
        "description": "Number of items compressed by the item compressor task.",
        "added": "7.0.0"
    },
    {
        "key": "ep_checkpoint_computed_max_size",
        "unit": "bytes",
        "description": "Actual max size in bytes of a single Checkpoint",
        "added": "7.1.0"
    },
    {
        "key": "ep_cursors_dropped",
        "unit": "none",
        "description": "Number of cursors dropped by the checkpoint remover",
        "added": "7.0.0"
    },
    {
        "key": "ep_mem_freed_by_checkpoint_removal",
        "unit": "bytes",
        "description": "Amount of memory freed through ckpt removal",
        "added": "7.1.0"
    },
    {
        "key": "ep_mem_freed_by_checkpoint_item_expel",
        "unit": "bytes",
        "description": "Memory recovered from Checkpoint by expelling clean items (i.e. items processed by all cursors) from the queue",
        "added": "7.1.0"
    },
    {
        "key": "ep_num_checkpoints",
        "unit": "none",
        "description": "The number of checkpoint objects allocated",
        "added": "7.1.0"
    },
    {
        "key": "ep_num_checkpoints_allocated_total",
        "unit": "none",
        "type": "counter",
        "description": "The number of checkpoint object allocations",
        "added": "7.6.0"
    },
    {
        "key": "ep_num_checkpoints_freed_total",
        "unit": "none",
        "type": "counter",
        "description": "The number of checkpoint object deallocations",
        "added": "7.6.0"
    },
    {
        "key": "ep_num_checkpoints_pending_destruction",
        "unit": "none",
        "description": "Number of checkpoints detached from CM and owned by Destroyers",
        "added": "7.6.0"
    },
    {
        "key": "ep_data_write_failed",
        "unit": "none",
        "description": "Total compaction and commit failures",
        "added": "7.0.0"
    },
    {
        "key": "ep_data_read_failed",
        "unit": "none",
        "description": "Total number of get failures",
        "added": "7.0.0"
    },
    {
        "key": "ep_io_document_write_bytes",
        "unit": "bytes",
        "description": "Total number of bytes written. Only maintained by couchstore buckets and includes Couchstore B-Tree and other overheads",
        "added": "7.0.0"
    },
    {
        "key": "ep_io_total_read_bytes",
        "unit": "bytes",
        "description": "Total number of bytes read",
        "added": "7.0.0"
    },
    {
        "key": "ep_io_total_write_bytes",
        "unit": "bytes",
        "description": "Total number of bytes written",
        "added": "7.0.0"
    },
    {
        "key": "ep_io_compaction_read_bytes",
        "unit": "bytes",
        "description": "Total number of bytes read during compaction",
        "added": "7.0.0"
    },
    {
        "key": "ep_io_compaction_write_bytes",
        "unit": "bytes",
        "description": "Total number of bytes written during compaction",
        "added": "7.0.0"
    },
    {
        "key": "ep_io_bg_fetch_read_count",
        "unit": "none",
        "description": "Accumulated count of read system calls issued by BG fetches, only maintained by couchstore buckets",
        "added": "7.0.0"
    },
    {
        "key": "ep_bg_fetch_avg_read_amplification",
        "unit": "ratio",
        "description": "Average read amplification for all background fetch operations - ratio of read()s to documents fetched.",
        "added": "7.0.0"
    },
/* Magma stats */
    {
        "key": "ep_magma_sets",
        "unit": "none",
        "description": "Number of set operations (DocUpsert)",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_gets",
        "unit": "none",
        "description": "Number of get operations",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_inserts",
        "unit": "none",
        "description": "Number of DocInsert operations",
        "added": "7.1.0"
    },
    {
        "family": "magma_itr",
        "unit": "none",
        "description": "Number of items returned by iterators"
    },
    {
        "key": "ep_magma_keyitr_items_read",
        "unit": "none",
        "added": "7.6.0",
        "prometheus": {
            "family": "magma_itr",
            "labels": {
                "for": "keyindex",
                "result": "read"
            }
        },
        "description": "Number of items returned by the ByKeyIterator."
    },
    {
        "key": "ep_magma_seqitr_items_read",
        "unit": "none",
        "added": "7.6.0",
        "prometheus": {
            "family": "magma_itr",
            "labels": {
                "for": "seqindex",
                "result": "read"
            }
        },
        "description": "Number of items returned by the BySeqIterator."
    },
    {
        "key": "ep_magma_keyitr_items_skipped",
        "unit": "none",
        "added": "7.6.0",
        "prometheus": {
            "family": "magma_itr",
            "labels": {
                "for": "keyindex",
                "result": "skipped"
            }
        },
        "description": "Number of items internally read but skipped over by the ByKeyIterator. An item is skipped if it is an older document version."
    },
    {
        "key": "ep_magma_seqitr_items_skipped",
        "unit": "none",
        "added": "7.6.0",
        "prometheus": {
            "family": "magma_itr",
            "labels": {
                "for": "seqindex",
                "result": "skipped"
            }
        },
        "description": "Number of items internally read but skipped over by the ByKeyIterator. An item is skipped if it is an older document version."
    },
/* History stats. */
    {
        "key": "ep_magma_history_size_evicted",
        "unit": "bytes",
        "description": "History eviction bytes based on size",
        "added": "7.2.0"
    },
    {
        "key": "ep_magma_history_time_evicted",
        "unit": "bytes",
        "description": "History eviction bytes based on time",
        "added": "7.2.0"
    },
/* Compaction. */
    {
        "key": "ep_magma_compactions",
        "unit": "none",
        "added": "7.1.0",
        "description": "Count of Magma compactions in key, seq and local index."
    },
    {
        "family": "magma_compactions",
        "unit": "none",
        "description": "Count of Magma compactions"
    },
    {
        "key": "ep_magma_keyindex_compactions",
        "unit": "none",
        "added": "7.2.0",
        "prometheus": {
            "family": "magma_compactions",
            "labels": {
                "for": "keyindex"
            }
        },
        "description": "Count of Magma compactions in key index."
    },
    {
        "key": "ep_magma_seqindex_compactions",
        "unit": "none",
        "added": "7.2.0",
        "prometheus": {
            "family": "magma_compactions",
            "labels": {
                "for": "seqindex"
            }
        },
        "description": "Count of Magma compactions in seq index."
    },
    {
        "key": "ep_magma_seqindex_data_compactions",
        "unit": "none",
        "added": "7.6.0",
        "description": "Count of Magma compactions in seq index that compact the data level. This are already accounted in ep_magma_seqindex_compactions hence not part of the magma_compactions Prometheus stat family."
    },
    {
        "key": "ep_magma_flushes",
        "unit": "none",
        "description": "Number of write cache flushes performed",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_ttl_compactions",
        "unit": "none",
        "description": "Number of time-to-live based compactions",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_filecount_compactions",
        "unit": "none",
        "description": "Number of compactions triggered by file count",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_keyindex_filecount_compactions",
        "unit": "none",
        "description": "Number of compactions triggered by file count for the KeyIndex",
        "added": "7.2.0"
    },
    {
        "key": "ep_magma_seqindex_filecount_compactions",
        "unit": "none",
        "description": "Number of compactions triggered by file count for the SeqIndex",
        "added": "7.2.0"
    },
    {
        "key": "ep_magma_writer_compactions",
        "unit": "none",
        "description": "Number of compaction performed on the writer thread",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_keyindex_writer_compactions",
        "unit": "none",
        "description": "Number of compaction performed on the writer thread for the KeyIndex",
        "added": "7.2.0"
    },
    {
        "key": "ep_magma_seqindex_writer_compactions",
        "unit": "none",
        "description": "Number of compaction performed on the writer thread for the SeqIndex",
        "added": "7.2.0"
    },
/* Read amp. */
    {
        "key": "ep_magma_readamp",
        "unit": "ratio",
        "description": "Bytes read from disk / bytes outgoing. Bytes read from disk includes Gets and compactors (excluding WAL)",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_readamp_get",
        "unit": "ratio",
        "description": "Bytes Read from disk by only Get threads / Bytes outgoing",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_read_bytes",
        "unit": "bytes",
        "description": "Total bytes read from disk as per Magma's manual accounting in various code paths",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_read_bytes_compact",
        "unit": "bytes",
        "description": "Total bytes read from disk by compactors",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_read_bytes_get",
        "unit": "bytes",
        "description": "Total bytes read from disk by gets",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_bytes_outgoing",
        "unit": "bytes",
        "description": "Total bytes returned via get (excluding bytes returned from sequence iterator)",
        "added": "7.1.0"
    },
/* ReadIOAmp. */
    {
        "key": "ep_magma_readio",
        "unit": "none",
        "description": "Number of read IOs performed",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_readioamp",
        "unit": "ratio",
        "description": "Number of read IOs performed by GetDocs divided by the number of GetDocs",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_bytes_per_read",
        "unit": "ratio",
        "description": "Bytes read by get / number of Gets",
        "added": "7.1.0"
    },
/* Write amp. */
    {
        "key": "ep_magma_bytes_incoming",
        "unit": "bytes",
        "added": "7.1.0",
        "description": "Data written to key, seq, local index as part of the KV frontend writes."
    },
    {
        "family": "magma_bytes_incoming",
        "unit": "bytes",
        "description": "Data written as part of the KV frontend writes."
    },
    {
        "key": "ep_magma_keyindex_bytes_incoming",
        "unit": "bytes",
        "added": "7.6.0",
        "prometheus": {
            "family": "magma_bytes_incoming",
            "labels": {
                "for": "keyindex"
            }
        },
        "description": "Data written to key index as part of the KV frontend writes."
    },
    {
        "key": "ep_magma_seqindex_bytes_incoming",
        "unit": "bytes",
        "added": "7.6.0",
        "prometheus": {
            "family": "magma_bytes_incoming",
            "labels": {
                "for": "seqindex"
            }
        },
        "description": "Data written to seq index as part of the KV frontend writes."
    },
    {
        "key": "ep_magma_seqindex_delta_bytes_incoming",
        "unit": "bytes",
        "added": "7.6.0",
        "description": "Data written to seq index delta levels as part of frontend update operations. This is already accounted in ep_magma_seqindex_bytes_incoming hence not part of Prometheus stat family magma_bytes_incoming."
    },
    {
        "key": "ep_magma_write_bytes",
        "unit": "bytes",
        "added": "7.1.0",
        "description": "Bytes written by Magma flushes, compactions and WAL writes."
    },
    {
        "family": "magma_write_bytes",
        "unit": "bytes",
        "description": "Bytes written by Magma flushes, compactions."
    },
    {
        "key": "ep_magma_keyindex_write_bytes",
        "unit": "bytes",
        "added": "7.6.0",
        "prometheus": {
            "family": "magma_write_bytes",
            "labels": {
                "for": "keyindex"
            }
        },
        "description": "Bytes written by Magma flushes, compactions of the key index."
    },
    {
        "key": "ep_magma_seqindex_write_bytes",
        "unit": "bytes",
        "added": "7.6.0",
        "prometheus": {
            "family": "magma_write_bytes",
            "labels": {
                "for": "seqindex"
            }
        },
        "description": "Bytes written by Magma flushes, compactions of the seq index."
    },
    {
        "key": "ep_magma_seqindex_delta_write_bytes",
        "unit": "bytes",
        "added": "7.6.0",
        "description": "Bytes written by Magma flushes, compactions of the seq index delta levels. This is already accounted into ep_magma_sequndex_write_bytes hence not part of the Prometheus stat family magma_write_bytes."
    },
    {
        "key": "ep_magma_write_bytes_compact",
        "unit": "bytes",
        "added": "7.1.0",
        "description": "Bytes written by Magma compactions."
    },
    {
        "family": "magma_write_bytes_filecount_compact",
        "unit": "bytes",
        "description": "Bytes written by Magma compactions due to file count triggers."
    },
    {
        "key": "ep_magma_keyindex_write_bytes_filecount_compact",
        "unit": "bytes",
        "added": "7.6.0",
        "prometheus": {
            "family": "magma_write_bytes_filecount_compact",
            "labels": {
                "for": "keyindex"
            }
        },
        "description": "Bytes written by Magma compactions of the key index due to file count triggers."
    },
    {
        "key": "ep_magma_seqindex_write_bytes_filecount_compact",
        "unit": "bytes",
        "added": "7.6.0",
        "prometheus": {
            "family": "magma_write_bytes_filecount_compact",
            "labels": {
                "for": "seqindex"
            }
        },
        "description": "Bytes written by Magma compactions of the seq index due to file count triggers."
    },
/* Fragmentation. */
    {
        "key": "ep_magma_logical_data_size",
        "unit": "bytes",
        "description": "The logical data size, including history",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_logical_disk_size",
        "unit": "bytes",
        "description": "The logical disk size, including history",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_history_logical_data_size",
        "unit": "bytes",
        "description": "The logical data size of history",
        "added": "7.2.0"
    },
    {
        "key": "ep_magma_history_logical_disk_size",
        "unit": "bytes",
        "description": "The logical disk size of history",
        "added": "7.2.0"
    },
    {
        "key": "ep_magma_fragmentation",
        "unit": "ratio",
        "description": "Fragmentation on disk (excludes history)",
        "added": "7.1.0"
    },
/* Disk usage. */
    {
        "key": "ep_magma_total_disk_usage",
        "unit": "bytes",
        "description": "Compressed size of all SSTables in all checkpoints, WAL and any other files on disk",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_wal_disk_usage",
        "unit": "bytes",
        "description": "Disk usage by the WAL",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_checkpoint_disk_usage",
        "unit": "bytes",
        "description": "Checkpoint overhead",
        "added": "7.2.0"
    },
    {
        "key": "ep_magma_active_disk_usage",
        "unit": "bytes",
        "description": "Compressed disk size of latest version of the LSM Trees. This includes history",
        "added": "7.2.0"
    },
/* Memory usage. */
    {
        "key": "ep_magma_read_ahead_buffer_mem_used",
        "unit": "bytes",
        "description": "Memory consumed by read ahead buffers. They are used for compactions and sequence iterators. This is included in BufferMemUsed",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_lsmtree_object_mem_used",
        "unit": "bytes",
        "description": "Memory used by LSMTree objects",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_table_object_mem_used",
        "unit": "bytes",
        "description": "Memory used by SSTable objects",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_histogram_mem_used",
        "unit": "bytes",
        "description": "Memory usage for MagmaHistogramStats and file histograms",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_block_cache_mem_used",
        "unit": "bytes",
        "description": "Memory used by block cache. Accounts for allocated size of blocks that includes allocator internal fragmentation and any internal cache overheads due to auxilliary structures",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_write_cache_mem_used",
        "unit": "bytes",
        "description": "Memory usage of the write cache",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_wal_mem_used",
        "unit": "bytes",
        "description": "Total WAL memory used, including WAL buffer and any auxiliary memory",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_table_meta_mem_used",
        "unit": "bytes",
        "description": "Memory used by sstable metadata",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_buffer_mem_used",
        "unit": "bytes",
        "description": "Memory usage for some buffers",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_bloom_filter_mem_used",
        "unit": "bytes",
        "description": "Bloom filter memory usage in all versions of the LSM Trees",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_total_mem_used",
        "unit": "bytes",
        "description": "Total memory used by bloom filters, write cache, block cache and index blocks This account for all versions of the trees",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_tree_snapshot_mem_used",
        "unit": "bytes",
        "description": "Memory consumed by all LSMTree TreeSnapshots",
        "added": "7.6.0"
    },
    {
        "key": "ep_magma_index_resident_ratio",
        "unit": "ratio",
        "description": "Proportion of keyIndex (data+index blocks) and seqIndex (index blocks) in memory",
        "added": "7.1.0"
    },
/* Block cache. */
    {
        "key": "ep_magma_block_cache_hits",
        "unit": "none",
        "description": "Number of block cache hits",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_block_cache_misses",
        "unit": "none",
        "description": "Number of block cache misses",
        "added": "7.1.0"
    },
/* SST file count. */
    {
        "key": "ep_magma_tables_created",
        "unit": "none",
        "description": "Number of table files created",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_tables_deleted",
        "unit": "none",
        "description": "Number of table files deleted",
        "added": "7.1.0"
    },
    {
        "key": "ep_magma_tables",
        "unit": "none",
        "description": "Number of files used for tables",
        "added": "7.1.0"
    },
/* NSync. */
    {
        "key": "ep_magma_syncs",
        "unit": "none",
        "description": "Number of fsyncs performed",
        "added": "7.1.0"
    },
    {
        "key" : "ep_magma_data_blocks_uncompressed_size",
        "unit": "none",
        "description": "Data blocks uncompressed size",
        "added": "7.2.0"
    },
    {
        "key" : "ep_magma_data_blocks_compressed_size",
        "unit": "none",
        "description": "Data blocks compressed size; actual size in storage",
        "added": "7.2.0"
    },
    {
        "key" : "ep_magma_data_blocks_compression_ratio",
        "unit": "ratio",
        "description": "The compression ratio calculated by dividing the uncompressed data size by the compressed data size",
        "added": "7.2.0"
    },
    {
        "key" : "ep_magma_data_blocks_space_reduction_estimate_pct",
        "unit": "percent",
        "description": "Estimated percentage of space savings in compressed data blocks (0-100)",
        "added": "7.2.0"
    },
/* EPBucket::getFileStats */
    {
        "key": "ep_db_data_size",
        "unit": "bytes",
        "description": "Total size of valid data in db files",
        "added": "7.0.0"
    },
    {
        "key": "ep_db_file_size",
        "unit": "bytes",
        "description": "Total size of the db files",
        "added": "7.0.0"
    },
    {
        "key": "ep_db_prepare_size",
        "unit": "bytes",
        "description": "Total size of SyncWrite prepares in db files",
        "added": "7.0.0"
    },
    {
        "key": "ep_db_history_file_size",
        "unit": "bytes",
        "description": "The total size of all history currently stored by the bucket",
        "added": "7.2.0"
    },
    {
        "key": "ep_db_history_start_timestamp",
        "unit": "seconds",
        "description": "The timestamp of the oldest document stored in the history window, oldest of all vbuckets",
        "added": "7.2.0"
    },
/* Timing stats */
    {
        "key": "task_duration",
        "unit": "microseconds",
        "type": "histogram",
        "description": "Per-task histogram of time taken to run a task",
        "cbstat": "{task}[{type}]",
        "added": "7.6.2"
    },
    {
        "key": "cmd_duration",
        "unit": "microseconds",
        "type": "histogram",
        "description": "Per-opcode histogram of time taken to execute operations",
        "cbstat": false,
        "added": "7.0.0"
    },
    {
        "key": "bg_wait",
        "unit": "microseconds",
        "type": "histogram",
        "description": "Background fetches waiting in the dispatcher queue",
        "added": "7.0.0"
    },
    {
        "key": "bg_load",
        "unit": "microseconds",
        "type": "histogram",
        "description": "Background fetches waiting for disk",
        "added": "7.0.0"
    },
    {
        "key": "pending_ops",
        "unit": "microseconds",
        "prometheus": false,
        "description": "client connections blocked for operations in pending vbuckets",
        "added": "7.0.0"
    },
    {
        "key": "access_scanner",
        "unit": "microseconds",
        "prometheus": false,
        "description": "access scanner run times",
        "added": "7.0.0"
    },
    {
        "key": "checkpoint_remover",
        "unit": "microseconds",
        "prometheus": false,
        "description": "checkpoint remover run times",
        "added": "7.0.0"
    },
    {
        "key": "item_pager",
        "unit": "microseconds",
        "prometheus": false,
        "description": "item pager run times",
        "added": "7.0.0"
    },
    {
        "key": "expiry_pager",
        "unit": "microseconds",
        "prometheus": false,
        "description": "expiry pager run times",
        "added": "7.0.0"
    },
    {
        "key": "storage_age",
        "unit": "microseconds",
        "prometheus": false,
        "description": "Analogous to ep_storage_age in main stats",
        "added": "7.0.0"
    },
    {
        "key": "set_with_meta",
        "unit": "microseconds",
        "prometheus": false,
        "description": "set_with_meta latencies",
        "added": "7.0.0"
    },
    {
        "key": "get_cmd",
        "unit": "microseconds",
        "prometheus": false,
        "description": "servicing get requests",
        "added": "7.0.0"
    },
    {
        "key": "store_cmd",
        "unit": "microseconds",
        "prometheus": false,
        "added": "7.0.0"
    },
    {
        "key": "arith_cmd",
        "unit": "microseconds",
        "prometheus": false,
        "description": "servicing incr/decr requests",
        "added": "7.0.0"
    },
    {
        "key": "get_stats_cmd",
        "unit": "microseconds",
        "prometheus": false,
        "description": "servicing get_stats requests",
        "added": "7.0.0"
    },
    {
        "key": "get_vb_cmd",
        "unit": "microseconds",
        "prometheus": false,
        "description": "servicing vbucket status requests",
        "added": "7.0.0"
    },
    {
        "key": "set_vb_cmd",
        "unit": "microseconds",
        "prometheus": false,
        "description": "servicing vbucket set state commands",
        "added": "7.0.0"
    },
    {
        "key": "del_vb_cmd",
        "unit": "microseconds",
        "prometheus": false,
        "description": "servicing vbucket deletion commands",
        "added": "7.0.0"
    },
    {
        "key": "chk_persistence_cmd",
        "unit": "microseconds",
        "prometheus": false,
        "description": "waiting for checkpoint persistence",
        "added": "7.0.0"
    },
    {
        "key": "notify_io",
        "unit": "microseconds",
        "prometheus": false,
        "description": "waking blocked connections",
        "added": "7.0.0"
    },
    {
        "family": "disk",
        "unit": "microseconds",
        "description": "time spent waiting for disk"
    },
    {
        "key": "disk_insert",
        "unit": "microseconds",
        "type": "histogram",
        "prometheus": {
            "family": "disk",
            "labels": {
                "op": "insert"
            }
        },
        "description": "waiting for disk to store a new item",
        "added": "7.0.0"
    },
    {
        "key": "disk_update",
        "unit": "microseconds",
        "type": "histogram",
        "prometheus": {
            "family": "disk",
            "labels": {
                "op": "update"
            }
        },
        "description": "waiting for disk to modify an existing item",
        "added": "7.0.0"
    },
    {
        "key": "disk_del",
        "unit": "microseconds",
        "type": "histogram",
        "prometheus": {
            "family": "disk",
            "labels": {
                "op": "del"
            }
        },
        "description": "waiting for disk to delete an item",
        "added": "7.0.0"
    },
    {
        "key": "disk_vb_del",
        "unit": "microseconds",
        "type": "histogram",
        "prometheus": {
            "family": "disk",
            "labels": {
                "op": "vb_del"
            }
        },
        "description": "waiting for disk to delete a vbucket",
        "added": "7.0.0"
    },
    {
        "key": "disk_commit",
        "unit": "microseconds",
        "type": "histogram",
        "prometheus": {
            "family": "disk",
            "labels": {
                "op": "commit"
            }
        },
        "description": "waiting for a commit after a batch of updates",
        "added": "7.0.0"
    },
    {
        "key": "item_alloc_sizes",
        "unit": "bytes",
        "type": "histogram",
        "description": "Item allocation size counters (in bytes)",
        "added": "7.0.0"
    },
/* TODO: this is not timing related but is in doTimingStats */
    {
        "key": "bg_batch_size",
        "unit": "none",
        "type": "histogram",
        "description": "Batch size for background fetches",
        "added": "7.0.0"
    },
/* TODO: this is not timing related but is in doTimingStats */
    {
        "key": "persistence_cursor_get_all_items",
        "unit": "microseconds",
        "prometheus": false,
        "description": "Time spent in fetching all items by persistence cursor from checkpoint queues",
        "added": "7.0.0"
    },
    {
        "key": "dcp_cursors_get_all_items",
        "unit": "microseconds",
        "prometheus": false,
        "description": "Time spent in fetching all items by all dcp cursors from checkpoint queues",
        "added": "7.0.0"
    },
    {
        "family": "sync_write_commit_duration",
        "unit": "microseconds",
        "description": "Commit duration for SyncWrites"
    },
    {
        "key": "sync_write_commit_majority",
        "unit": "microseconds",
        "type": "histogram",
        "prometheus": {
            "family": "sync_write_commit_duration",
            "labels": {
                "level": "majority"
            }
        },
        "description": "Commit duration for level=majority SyncWrites",
        "added": "7.0.0"
    },
    {
        "key": "sync_write_commit_majority_and_persist_on_master",
        "unit": "microseconds",
        "type": "histogram",
        "prometheus": {
            "family": "sync_write_commit_duration",
            "labels": {
                "level": "majority_and_persist_on_master"
            }
        },
        "description": "Commit duration for level=majorityPersistActive SyncWrites",
        "added": "7.0.0"
    },
    {
        "key": "sync_write_commit_persist_to_majority",
        "unit": "microseconds",
        "type": "histogram",
        "prometheus": {
            "family": "sync_write_commit_duration",
            "labels": {
                "level": "persist_to_majority"
            }
        },
        "description": "Commit duration for level=persistMajority SyncWrites",
        "added": "7.0.0"
    },
/* server_stats */
    {
        "key": "uptime",
        "description" : "The number of seconds elapsed since process start",
        "unit": "seconds",
        "added": "7.0.0"
    },
    {
        "key": "stat_reset",
        "description": "Timestamp when the stats was reset",
        "unit": "none",
        "added": "7.0.0"
    },
/* TODO: String indicating when stats were reset. Change
 *  to a numeric stat for Prometheus?
 */
    {
        "key": "time",
        "description" : "The servers current time (seconds since January 1st, 1970 at 00:00:00 UTC)",
        "unit": "seconds",
        "added": "7.0.0"
    },
/* The following 3 stats are not exposed to prometheus as we don't expect their
 * values to change over time, assuming the system's clock configuration is
 * constant. However it is useful to have them show in cbstats so we can read
 * their current values either ad-hoc via cbstats or via cbcollect_info.
 */
    {
        "key": "clock_fine_overhead_ns",
        "description": "The overhead of calling \"now()\" on the fine clock",
        "unit": "none",
        "prometheus": false,
        "added": "7.1.0"
    },
    {
        "key": "clock_fine_resolution_ns",
        "unit": "none",
        "prometheus": false,
        "description": "The resolution (the smallest measurable time period between two consecutive calls to now()) of the fine clock",
        "added": "7.6.0"
    },
    {
        "key": "clock_coarse_overhead_ns",
        "description": "The overhead of calling \"now()\" on the coarse clock",
        "unit": "none",
        "prometheus": false,
        "added": "7.1.0"
    },
    {
        "key": "clock_coarse_resolution_ns",
        "unit": "none",
        "prometheus": false,
        "description": "The resolution (the smallest measurable time period between two consecutive calls to now()) of the coarse clock",
        "added": "7.6.0"
    },
    {
        "key": "clock_measurement_period_ns",
        "description": "The period of the clock we use to _measure_ the given clock with",
        "unit": "none",
        "prometheus": false,
        "added": "7.1.0"
    },
    {
        "key": "version",
        "description": "The version of Couchbase",
        "unit": "none",
        "prometheus": false,
        "added": "7.0.0"
    },
/* version string */
    {
        "key": "memcached_version",
        "description": "The SHA1 for the git commit of the current memcached",
        "unit": "none",
        "prometheus": false,
        "added": "7.0.0"
    },
/* version string */
    {
        "key": "daemon_connections",
        "description": "The number of server sockets currently in use",
        "unit": "none",
        "added": "7.0.0"
    },
    {
        "key": "curr_connections",
        "description": "The current number of connections. This includes user, system and daemon connections",
        "unit": "none",
        "added": "7.0.0"
    },
    {
        "key": "system_connections",
        "unit": "none",
        "added": "7.0.0",
        "description" : "The number of connections to system ports in memcached"
    },
    {
        "key": "user_connections",
        "unit": "none",
        "added": "7.6.0",
        "description" : "The number of connections to user ports in memcached"
    },
    {
        "key": "rejected_connections",
        "description": "The number of connections rejected due to hitting the maximum number of connections",
        "cbstat": "rejected_conns",
        "unit": "none",
        "type": "counter",
        "added": "8.0.0"
    },
    {
        "key": "max_user_connections",
        "description": "Maximum number of connections to the interfaces marked as user",
        "unit": "none",
        "added": "7.6.0"
    },
    {
        "key": "max_system_connections",
        "description": "Maximum number of connections to the interfaces marked as system only",
        "unit": "none",
        "added": "7.6.0"
    },
    {
        "key": "total_connections",
        "description": "The total number of connections to this system since the process started (or reset)",
        "unit": "none",
        "type": "counter",
        "added": "7.0.0"
    },
    {
        "key": "connection_structures",
        "description": "Current number of allocated connection structures",
        "unit": "none",
        "added": "7.0.0"
    },
/* Amount of memory allocated by the daemon. */
    {
        "key": "daemon_memory_allocated",
        "description": "Total amount of memory allocated (outside the context of a bucket)",
        "unit": "bytes",
        "added": "7.1.0"
    },
/* Resident size of memory allocated by the daemon itself. */
    {
        "key": "daemon_memory_resident",
        "description": "Total amount of memory resident (outside the context of a bucket)",
        "unit": "bytes",
        "added": "7.1.0"
    },
    {
        "key": "cmd_get",
        "description": "The number of get operations",
        "unit": "none",
        "prometheus": false,
        "added": "7.0.0"
    },
/* this is not exposed to Prometheus as it duplicates
 * the information provided by get_hits+get_misses
 */
    {
        "key": "cmd_set",
        "description": "The number of set operations",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "set"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "cmd_flush",
        "description": "The number of flush operations",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "flush"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "cmd_lock",
        "description": "The number of lock operations",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "lock"
            }
        },
        "added": "7.0.0"
    },
    {
        "family": "subdoc_ops",
        "unit": "none",
        "description": "The number of subdoc operations"
    },
    {
        "key": "cmd_subdoc_lookup",
        "description": "The number of subdoc operations performing lookup",
        "unit": "none",
        "prometheus": {
            "family": "subdoc_ops",
            "labels": {
                "op": "lookup"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "cmd_subdoc_mutation",
        "description": "The number of subdoc operations performing data mutations",
        "unit": "none",
        "prometheus": {
            "family": "subdoc_ops",
            "labels": {
                "op": "mutation"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "bytes_subdoc_lookup_total",
        "description": "The total size of all documents used for subdoc lookup operations",
        "unit": "bytes",
        "prometheus": {
            "family": "subdoc_lookup_searched"
        },
        "added": "7.0.0"
    },
/* type _bytes will be suffixed */
    {
        "key": "bytes_subdoc_lookup_extracted",
        "description": "The total number of bytes from the documents being returned as part of subdoc lookup operations",
        "unit": "bytes",
        "prometheus": {
            "family": "subdoc_lookup_extracted"
        },
        "added": "7.0.0"
    },
    {
        "key": "bytes_subdoc_mutation_total",
        "description": "The total number of bytes for the documents mutated via subdoc",
        "unit": "bytes",
        "prometheus": {
            "family": "subdoc_mutation_updated"
        },
        "added": "7.0.0"
    },
    {
        "key": "bytes_subdoc_mutation_inserted",
        "description": "The total number of bytes inserted into the documents via subdoc",
        "unit": "bytes",
        "prometheus": {
            "family": "subdoc_mutation_inserted"
        },
        "added": "7.0.0"
    },
    {
        "key": "subdoc_update_races",
        "description": "The number of times a subdoc mutation had to be retried as the document was changed by a different actor while performing the operation",
        "unit": "none",
        "added": "7.6.0"
    },
    {
        "key": "stat_timings_mem_usage",
        "description": "The memory footprint for tracing times spent processing stat requests",
        "unit": "bytes",
        "added": "7.1.0"
    },
/* aggregates over all buckets */
    {
        "key": "cmd_total_sets",
        "description": "The total number of mutation operations (all buckets)",
        "unit": "none",
        "type": "counter",
        "prometheus": false,
        "added": "7.0.0"
    },
    {
        "key": "cmd_total_gets",
        "description": "The total number of data retrieval operations (all buckets)",
        "unit": "none",
        "type": "counter",
        "prometheus": false,
        "added": "7.0.0"
    },
    {
        "key": "cmd_total_ops",
        "description": "The sum of cmd_total_sets and cmd_total_gets (all buckets)",
        "unit": "none",
        "type": "counter",
        "prometheus": false,
        "added": "7.0.0"
    },
/* aggregates over multiple operations for a single bucket */
    {
        "key": "cmd_mutation",
        "description": "The number of mutation operations",
        "unit": "none",
        "type": "counter",
        "added": "7.0.0"
    },
    {
        "key": "cmd_lookup",
        "description": "The number of lookup operations",
        "unit": "none",
        "type": "counter",
        "added": "7.0.0"
    },
    {
        "key": "stat_timings",
        "description": "Timing data for execution of a stat call",
        "unit": "microseconds",
        "cbstat": "stat:{stat_key}{arg_suffix}",
        "prometheus": false,
        "added": "7.1.0"
    },
    {
        "key": "auth_cmds",
        "description": "The number of authentication commands",
        "unit": "none",
        "added": "7.0.0"
    },
    {
        "key": "auth_errors",
        "description": "The number of failed authentication requests",
        "unit": "none",
        "added": "7.0.0"
    },
    {
        "key": "auth_external_sent",
        "description": "The total number of requests sent to the external authentication provider",
        "unit": "none",
        "added": "8.0.0"
    },
    {
        "key": "auth_external_received",
        "description": "The number of received external authentication responses",
        "unit": "none",
        "added": "8.0.0"
    },
    {
        "key": "auth_external_authentication_duration",
        "unit": "microseconds",
        "type": "histogram",
        "description": "Timing histogram for external authentication execution times",
        "added": "8.0.0"
    },
    {
        "key": "auth_external_authorization_duration",
        "unit": "microseconds",
        "type": "histogram",
        "description": "Timing histogram for external authorization execution times",
        "added": "8.0.0"
    },
    {
        "key": "ep_num_invalid_cas",
        "description": "The total number of invalid CAS values.",
        "unit": "none",
        "type": "counter",
        "added": "8.0.0"
    },
    {
        "key": "ep_num_cas_regenerated",
        "description": "The total number of CAS value regenerated",
        "unit": "none",
        "type": "counter",
        "added": "8.0.0"
    },
    {
        "key": "get_hits",
        "description": "The number of successful get operations",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "get",
                "result": "hit"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "get_misses",
        "description": "The number of unsuccessful get operations",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "get",
                "result": "miss"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "delete_misses",
        "description": "The number of unsuccessful delete operations",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "delete",
                "result": "miss"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "delete_hits",
        "description": "The number of successful delete operations",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "delete",
                "result": "hit"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "incr_misses",
        "description": "The number of unsuccessful INCR operations",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "incr",
                "result": "miss"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "incr_hits",
        "description": "The number of successful INCR operations",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "incr",
                "result": "hit"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "decr_misses",
        "description": "The number of unsuccesful DECR operations",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "decr",
                "result": "miss"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "decr_hits",
        "description": "The number of successful DECR operations",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "decr",
                "result": "hit"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "cas_misses",
        "description": "The number of unsuccessful CAS operations due to missing document",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "cas",
                "result": "miss"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "cas_hits",
        "description": "The number of successful CAS operations",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "cas",
                "result": "hit"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "cas_badval",
        "description": "The number of unsuccessful CAS operations due to incorrect CAS value",
        "unit": "none",
        "prometheus": {
            "family": "ops",
            "labels": {
                "op": "cas",
                "result": "badval"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "bytes_read",
        "description": "The number bytes received from all connections bound to this bucket",
        "unit": "bytes",
        "prometheus": {
            "family": "read"
        },
        "added": "7.0.0"
    },
/* type _bytes will be suffixed */
    {
        "key": "bytes_written",
        "description": "The number bytes sent to all connections bound to this bucket",
        "unit": "bytes",
        "prometheus": {
            "family": "written"
        },
        "added": "7.0.0"
    },
    {
        "key": "threads",
        "description": "The number of threads used to serve clients",
        "unit": "none",
        "prometheus": false,
        "added": "7.0.0"
    },
    {
        "key": "thread_cpu_usage",
        "unit": "microseconds",
        "description": "Number of seconds the given thread has spent running according to the OS",
        "added": "7.6.0"
    },
    {
        "key": "conn_yields",
        "description": "The total number all clients in this bucket yield due to consuming the number of ops allowed for the current timeslice",
        "unit": "none",
        "type": "counter",
        "added": "7.0.0"
    },
    {
        "key": "conn_timeslice_yields",
        "description": "The total number all clients in this bucket yield due to using their entire timeslice",
        "unit": "none",
        "type": "counter",
        "added": "7.6.0"
    },
    {
        "key": "lock_errors",
        "description": "The number of times an operation failed due to accessing a locked document",
        "unit": "none",
        "added": "7.0.0"
    },
    {
        "key": "cmd_lookup_10s_count",
        "unit": "none",
        "description": "The number of lookup operations performed within the last 10 seconds",
        "added": "7.0.0"
    },
/* us suffix would be confusing in Prometheus as the stat is scaled to seconds */
    {
        "key": "cmd_lookup_10s_duration_us",
        "unit": "microseconds",
        "prometheus": {
            "family": "cmd_lookup_10s_duration"
        },
        "description": "The total duration of lookup operations performed over the last 10 seconds",
        "added": "7.0.0"
    },
    {
        "key": "cmd_mutation_10s_count",
        "unit": "none",
        "description": "The number of mutation operations performed within the last 10 seconds",
        "added": "7.0.0"
    },
/* us suffix would be confusing in Prometheus as the stat is scaled to seconds */
    {
        "key": "cmd_mutation_10s_duration_us",
        "unit": "microseconds",
        "prometheus": {
            "family": "cmd_mutation_10s_duration"
        },
        "description": "The total duration of mutation operations performed over the last 10 seconds",
        "added": "7.0.0"
    },
    {
        "key": "total_resp_errors",
        "description": "The number of error messages returned",
        "unit": "none",
        "added": "7.0.0"
    },
    {
        "key": "mcbp_response_counters",
        "cbstat": "responses",
        "description": "Counters for the various status codes returned to the client",
        "unit": "none",
        "prometheus": false,
        "added": "7.0.0"
    },
    {
        "key": "subdoc_execute",
        "description": "Timing histogram for subdoc execute phase",
        "unit": "none",
        "prometheus": false,
        "added": "7.0.0"
    },
    {
        "key": "scheduler_info",
        "description": "Timing histogram of scheduler info for front end worker threads",
        "cbstat": "Thread-{tid}",
        "unit": "none",
        "prometheus": false,
        "added": "7.0.0"
    },
    {
        "key": "clients",
        "unit": "none",
        "description": "The number of references to the bucket",
        "added": "7.6.0"
    },
    {
        "key": "items_in_transit",
        "unit": "none",
        "description": "The number of items currently in transit (with a reference into the engine)",
        "added": "7.6.0"
    },
    {
        "key": "audit_enabled",
        "description": "Boolean value to indicate if audit is enabled or not",
        "unit": "none",
        "cbstat": "enabled",
        "prometheus": {
            "family": "audit_enabled"
        },
        "added": "7.0.0"
    },
    {
        "key": "audit_dropped_events",
        "description": "The number of audit events dropped due to errors while trying to insert them to the audit trail",
        "unit": "none",
        "cbstat": "dropped_events",
        "type": "counter",
        "prometheus": {
            "family": "audit_dropped_events"
        },
        "added": "7.0.0"
    },
    {
        "key" : "bucket_details",
        "description": "Internal bucket metrics",
        "cbstat": "bucket details:{name}",
        "unit": "none",
        "prometheus": false,
        "added": "7.0.0"
    },
    {
        "key": "phosphor_registry_group_count",
        "cbstat": "registry_group_count",
        "description": "Internal tracing information collected by Phosphor",
        "added": "7.0.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "phosphor_buffer_name",
        "cbstat": "buffer_name",
        "description": "Internal tracing information collected by Phosphor",
        "added": "7.0.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "phosphor_buffer_is_full",
        "cbstat": "buffer_is_full",
        "description": "Internal tracing information collected by Phosphor",
        "added": "7.0.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "phosphor_buffer_chunk_count",
        "cbstat": "buffer_chunk_count",
        "description": "Internal tracing information collected by Phosphor",
        "added": "7.0.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "phosphor_buffer_total_loaned",
        "cbstat": "buffer_total_loaned",
        "description": "Internal tracing information collected by Phosphor",
        "added": "7.0.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "phosphor_buffer_loaned_chunks",
        "cbstat": "buffer_loaned_chunks",
        "description": "Internal tracing information collected by Phosphor",
        "added": "7.0.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "phosphor_buffer_size",
        "cbstat": "buffer_size",
        "description": "Internal tracing information collected by Phosphor",
        "added": "7.0.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "phosphor_buffer_generation",
        "cbstat": "buffer_generation",
        "description": "Internal tracing information collected by Phosphor",
        "added": "7.0.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "phosphor_log_is_enabled",
        "cbstat": "log_is_enabled",
        "description": "Internal tracing information collected by Phosphor",
        "added": "7.0.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "phosphor_log_has_buffer",
        "cbstat": "log_has_buffer",
        "description": "Internal tracing information collected by Phosphor",
        "added": "7.0.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "phosphor_log_thread_names",
        "cbstat": "log_thread_names",
        "description": "Internal tracing information collected by Phosphor",
        "added": "7.0.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "phosphor_log_deregistered_threads",
        "cbstat": "log_deregistered_threads",
        "description": "Internal tracing information collected by Phosphor",
        "added": "7.0.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "phosphor_log_registered_tenants",
        "cbstat": "log_registered_tenants",
        "description": "Internal tracing information collected by Phosphor",
        "added": "7.0.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "memory_allocator",
        "cbstat": "allocator",
        "description": "Internal memory allocator information",
        "added": "7.0.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "memcached_thread_information",
        "cbstat": "threads:details",
        "description": "Detailed thread information for threads in memcached",
        "added": "7.6.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "memcached_num_auxio_threads_actual",
        "cbstat": "num_auxio_threads_actual",
        "description": "The current number of threads in the AUXIO pool",
        "added": "7.6.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "memcached_num_auxio_threads_configured",
        "cbstat": "num_auxio_threads_configured",
        "description": "The configured number of threads in the AUXIO pool",
        "added": "7.6.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "memcached_num_frontend_threads_actual",
        "cbstat": "num_frontend_threads_actual",
        "description": "The current number of threads in the front end worker pool",
        "added": "7.6.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "memcached_num_frontend_threads_configured",
        "cbstat": "num_frontend_threads_configured",
        "description": "The configured number of threads in the front end worker pool",
        "added": "7.6.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "memcached_num_nonio_threads_actual",
        "cbstat": "num_nonio_threads_actual",
        "description": "The current number of threads in the NONIO pool",
        "added": "7.6.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "memcached_num_nonio_threads_configured",
        "cbstat": "num_nonio_threads_configured",
        "description": "The configured number of threads in the NONIO pool",
        "added": "7.6.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "memcached_num_reader_threads_actual",
        "cbstat": "num_reader_threads_actual",
        "description": "The current number of threads in the reader pool",
        "added": "7.6.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "memcached_num_reader_threads_configured",
        "cbstat": "num_reader_threads_configured",
        "description": "The configured number of threads in the reader pool",
        "added": "7.6.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "memcached_num_writer_threads_actual",
        "cbstat": "num_writer_threads_actual",
        "description": "The current number of threads in the writer pool",
        "added": "7.6.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "memcached_num_writer_threads_configured",
        "cbstat": "num_writer_threads_configured",
        "description": "The configured number of threads in the writer pool",
        "added": "7.6.0",
        "prometheus": false,
        "unit": "none"
    },
    {
        "key": "vb_num",
        "unit": "none",
        "cbstat": "vb_{state}_num",
        "prometheus": {
            "family": "num_vbuckets"
        },
        "description": "Number of vBuckets",
        "added": "7.0.0"
    },
    {
        "key": "vb_curr_items",
        "unit": "none",
        "cbstat": "vb_{state}_curr_items",
        "prometheus": {
            "family": "vb_curr_items"
        },
        "description": "Count of alive (non-deleted) items in the vbucket, including non-resident items",
        "added": "7.0.0"
    },
    {
        "key": "vb_hp_vb_req_size",
        "unit": "none",
        "cbstat": "vb_{state}_hp_vb_req_size",
        "prometheus": {
            "family": "num_high_pri_requests"
        },
        "description": "Num of async high priority requests",
        "added": "7.0.0"
    },
    {
        "key": "vb_num_non_resident",
        "unit": "none",
        "cbstat": "vb_{state}_num_non_resident",
        "prometheus": {
            "family": "vb_num_non_resident"
        },
        "description": "The number of non-resident items",
        "added": "7.0.0"
    },
    {
        "key": "vb_perc_mem_resident",
        "unit": "percent",
        "cbstat": "vb_{state}_perc_mem_resident",
        "prometheus": {
            "family": "vb_perc_mem_resident"
        },
        "description": "Percentage of items which are resident in memory",
        "added": "7.0.0"
    },
    {
        "key": "vb_eject",
        "unit": "none",
        "cbstat": "vb_{state}_eject",
        "prometheus": {
            "family": "vb_eject"
        },
        "description": "Cumulative count of the number of items whose values have been ejected for this vBucket",
        "added": "7.0.0"
    },
    {
        "key": "vb_expired",
        "unit": "none",
        "cbstat": "vb_{state}_expired",
        "prometheus": {
            "family": "vb_expired"
        },
        "description": "Cumulative count of the number of items which have been expired for this vBucket",
        "added": "7.0.0"
    },
    {
        "key": "vb_meta_data_memory",
        "unit": "bytes",
        "cbstat": "vb_{state}_meta_data_memory",
        "prometheus": {
            "family": "vb_meta_data_memory"
        },
        "description": "Total memory used by meta data, including the key",
        "added": "7.0.0"
    },
    {
        "key": "vb_meta_data_disk",
        "unit": "bytes",
        "cbstat": "vb_{state}_meta_data_disk",
        "prometheus": {
            "family": "vb_meta_data_disk"
        },
        "description": "Estimate of how much metadata has been written to disk since startup",
        "added": "7.0.0"
    },
    {
        "key": "vb_checkpoint_memory",
        "unit": "bytes",
        "cbstat": "vb_{state}_checkpoint_memory",
        "prometheus": {
            "family": "vb_checkpoint_memory"
        },
        "description": "Total memory in checkpoints, sum of kv_vb__checkpoint_memory_overhead_bytes and kv_vb_checkpoint_memory_queue_bytes",
        "added": "7.0.0"
    },
    {
        "key": "vb_checkpoint_memory_queue",
        "unit": "bytes",
        "cbstat": "vb_{state}_checkpoint_memory_queue",
        "prometheus": {
            "family": "vb_checkpoint_memory_queue"
        },
        "description": "Total memory of all the items queued in checkpoints. For every item in the queue, that accounts the item's key, metadata and value size. The value allocation may have shared ownership HashTable and DCP Stream readyQ.",
        "added": "7.1.0"
    },
    {
        "key": "vb_checkpoint_memory_overhead",
        "unit": "bytes",
        "cbstat": "vb_{state}_checkpoint_memory_overhead",
        "prometheus": {
            "family": "vb_checkpoint_memory_overhead"
        },
        "description": "Checkpoints memory overhead. That is the sum of kv_vb_checkpoint_memory_overhead_index_bytes and kv_vb_checkpoint_memory_overhead_queue_bytes.",
        "added": "7.0.0"
    },
    {
        "key": "vb_checkpoint_memory_overhead_queue",
        "unit": "bytes",
        "cbstat": "vb_{state}_checkpoint_memory_overhead_queue",
        "prometheus": {
            "family": "vb_checkpoint_memory_overhead_queue"
        },
        "description": "Memory overhead in the checkpoints internal items queue. For every item in the queue, that accounts the internal structure allocation for holding the item's reference.",
        "added": "7.1.0"
    },
    {
        "key": "vb_checkpoint_memory_overhead_index",
        "unit": "bytes",
        "cbstat": "vb_{state}_checkpoint_memory_overhead_index",
        "prometheus": {
            "family": "vb_checkpoint_memory_overhead_index"
        },
        "description": "Memory overhead in the checkpoints key-index. For every index entry, that accounts the internal structure allocation plus the key-size.",
        "added": "7.1.0"
    },
    {
        "key": "vb_mem_freed_by_checkpoint_item_expel",
        "unit": "bytes",
        "cbstat": "vb_{state}_mem_freed_by_checkpoint_item_expel",
        "description": "Memory recovered from Checkpoint by expelling clean items (i.e. items processed by all cursors) from the queue",
        "added": "7.1.0"
    },
    {
        "key": "vb_mem_freed_by_checkpoint_removal",
        "unit": "bytes",
        "cbstat": "vb_{state}_mem_freed_by_checkpoint_removal",
        "description": "Amount of memory freed through ckpt removal",
        "added": "7.1.0"
    },
    {
        "key": "vb_ht_memory",
        "unit": "bytes",
        "cbstat": "vb_{state}_ht_memory",
        "prometheus": {
            "family": "vb_ht_memory"
        },
        "description": "Memory overhead of the HashTable",
        "added": "7.0.0",
        /*
         * Morpheus is currently 8.0.0, if it changes eventually fix the
         * version below. Filed MB-60547 to track.
         */
        "deprecated": "8.0.0",
        "notes": "Renamed as kv_vb_ht_memory_overhead_bytes, as it describes the metric more accurately"
    },
    {
        "key": "vb_ht_memory_overhead",
        "unit": "bytes",
        "cbstat": "vb_{state}_ht_memory_overhead",
        "prometheus": {
            "family": "vb_ht_memory_overhead"
        },
        "description": "Memory overhead of the HashTable",
        /*
         * Morpheus is currently 8.0.0, if it changes eventually fix the
         * version below. Filed MB-60547 to track.
         */
        "added": "8.0.0"
    },
    {
        "key": "vb_ht_item_memory",
        "unit": "bytes",
        "cbstat": "vb_{state}_ht_item_memory",
        "prometheus": {
            "family": "vb_ht_item_memory"
        },
        "description": "The memory usage of items stored in the HashTable",
        "added": "7.1.0"
    },
    {
        "key": "vb_ht_item_memory_uncompressed",
        "unit": "bytes",
        "cbstat": "vb_{state}_ht_item_memory_uncompressed",
        "prometheus": {
            "family": "vb_ht_item_memory_uncompressed"
        },
        "description": "The memory usage of items stored in the HashTable, if the values were not compressed",
        "added": "7.1.0"
    },
    {
        "key": "vb_ht_max_size",
        "unit": "none",
        "cbstat": "vb_{state}_ht_max_size",
        "prometheus": {
            "family": "vb_ht_max_size"
        },
        "description": "The maximum HashTable size (number of slots) across all vbuckets",
        "added": "7.2.5"
    },
    {
        "key": "vb_ht_avg_size",
        "unit": "none",
        "cbstat": "vb_{state}_ht_avg_size",
        "prometheus": {
            "family": "vb_ht_avg_size"
        },
        "description": "The average size (number of slots) of the HashTable across all vbuckets",
        "added": "7.2.5"
    },
    {
        "key": "vb_bloom_filter_memory",
        "unit": "bytes",
        "cbstat": "vb_{state}_bloom_filter_memory",
        "prometheus": {
            "family": "vb_bloom_filter_memory"
        },
        "description": "The memory usage in bytes of the per-vBucket Bloom filters",
        "added": "7.1.0"
    },
    {
        "key": "vb_ops_create",
        "unit": "none",
        "cbstat": "vb_{state}_ops_create",
        "prometheus": {
            "family": "vb_ops_create"
        },
        "description": "Number of operations where an item has been flushed to disk that did not previously exist",
        "added": "7.0.0"
    },
    {
        "key": "vb_ops_update",
        "unit": "none",
        "cbstat": "vb_{state}_ops_update",
        "prometheus": {
            "family": "vb_ops_update"
        },
        "description": "Number of operations where a new version of an item has been persisted",
        "added": "7.0.0"
    },
    {
        "key": "vb_ops_delete",
        "unit": "none",
        "cbstat": "vb_{state}_ops_delete",
        "prometheus": {
            "family": "vb_ops_delete"
        },
        "description": "Number of operations where a delete has been persisted",
        "added": "7.0.0"
    },
    {
        "key": "vb_ops_get",
        "unit": "none",
        "cbstat": "vb_{state}_ops_get",
        "prometheus": {
            "family": "vb_ops_get"
        },
        "description": "Number of successful front-end get operations",
        "added": "7.0.0"
    },
    {
        "key": "vb_ops_reject",
        "unit": "none",
        "cbstat": "vb_{state}_ops_reject",
        "prometheus": {
            "family": "vb_ops_reject"
        },
        "description": "Number of fatal errors in persisting a mutation (including deletion)",
        "added": "7.0.0"
    },
    {
        "key": "vb_queue_size",
        "unit": "none",
        "cbstat": "vb_{state}_queue_size",
        "prometheus": {
            "family": "vb_queue_size"
        },
        "description": "Number of items in the disk queues",
        "added": "7.0.0"
    },
    {
        "key": "vb_queue_memory",
        "unit": "bytes",
        "cbstat": "vb_{state}_queue_memory",
        "prometheus": {
            "family": "vb_queue_memory"
        },
        "description": "Total memory used by the disk queues",
        "added": "7.0.0"
    },
    {
        "key": "vb_queue_age",
        "unit": "milliseconds",
        "cbstat": "vb_{state}_queue_age",
        "prometheus": {
            "family": "vb_queue_age"
        },
        "description": "Sum of disk queue item age in seconds",
        "added": "7.0.0"
    },
    {
        "key": "vb_queue_pending",
        "unit": "bytes",
        "cbstat": "vb_{state}_queue_pending",
        "prometheus": {
            "family": "vb_queue_pending"
        },
        "description": "Total bytes of pending writes in the disk queue",
        "added": "7.0.0"
    },
    {
        "key": "vb_queue_fill",
        "unit": "none",
        "cbstat": "vb_{state}_queue_fill",
        "prometheus": {
            "family": "vb_queue_fill"
        },
        "description": "Total items enqueued on disk queues",
        "added": "7.0.0"
    },
    {
        "key": "vb_queue_drain",
        "unit": "none",
        "cbstat": "vb_{state}_queue_drain",
        "prometheus": {
            "family": "vb_queue_drain"
        },
        "description": "Total drained items",
        "added": "7.0.0"
    },
    {
        "key": "vb_rollback_item_count",
        "unit": "none",
        "cbstat": "vb_{state}_rollback_item_count",
        "prometheus": {
            "family": "vb_rollback_item_count"
        },
        "description": "Total number of mutations discarded during rollback",
        "added": "7.0.0"
    },
    {
        "key": "vb_max_history_disk_size",
        "unit": "bytes",
        "cbstat": "vb_{state}_max_history_disk_size",
        "prometheus": {
            "family": "vb_max_history_disk_size"
        },
        "description": "The total size of history stored per-vBucket (the largest size reported by any vBucket)",
        "added": "7.2.0"
    },
    {
        "key": "vb_dm_mem_used",
        "unit": "bytes",
        "cbstat": "vb_{state}_dm_mem_used",
        "prometheus": {
            "family": "vb_dm_mem_used"
        },
        "description": "The memory usage in bytes of the per-VBucket Durability Monitor (in-progress SyncWrites)",
        "added": "7.2.1"
    },
        {
        "key": "vb_dm_num_tracked",
        "unit": "none",
        "cbstat": "vb_{state}_dm_num_tracked",
        "prometheus": {
            "family": "vb_dm_num_tracked"
        },
        "description": "The number of items tracked in the per-VBucket Durability Monitor (in-progress SyncWrites)",
        "added": "7.2.1"
    },
    {
        "key": "vb_evictable_mfu",
        "unit": "none",
        "cbstat": "vb_{state}_evictable_mfu",
        "description": "Histogram of the per-VBucket tracking MFU values of items which are currently evictable",
        "prometheus": false,
        "added": "7.6.0"
    },
    {
        "key": "curr_items",
        "unit": "none",
        "description": "Count of alive (non-deleted) items in active vbuckets, including non-resident items",
        "added": "7.0.0"
    },
    {
        "key": "curr_temp_items",
        "unit": "none",
        "description": "Number of temporary items in memory",
        "added": "7.0.0"
    },
    {
        "key": "curr_items_tot",
        "unit": "none",
        "description": "Total number of items",
        "added": "7.0.0"
    },
    {
        "key": "vb_sync_write_accepted_count",
        "unit": "none",
        "cbstat": "vb_{state}_sync_write_accepted_count",
        "prometheus": {
            "family": "vb_sync_write_accepted_count"
        },
        "description": "Total number of accepted SyncWrites (in-progress, aborted or committed)",
        "added": "7.0.0"
    },
    {
        "key": "vb_sync_write_committed_count",
        "unit": "none",
        "cbstat": "vb_{state}_sync_write_committed_count",
        "prometheus": {
            "family": "vb_sync_write_committed_count"
        },
        "description": "Total number of comitted SyncWrites",
        "added": "7.0.0"
    },
    {
        "key": "vb_sync_write_aborted_count",
        "unit": "none",
        "cbstat": "vb_{state}_sync_write_aborted_count",
        "prometheus": {
            "family": "vb_sync_write_aborted_count"
        },
        "description": "Total number of aborted SyncWrites",
        "added": "7.0.0"
    },
    {
        "key": "ep_vb_total",
        "unit": "none",
        "description": "Total vBuckets (count)",
        "added": "7.0.0"
    },
    {
        "key": "ep_total_new_items",
        "unit": "none",
        "description": "Total number of persisted new items",
        "added": "7.0.0"
    },
    {
        "key": "ep_total_del_items",
        "unit": "none",
        "description": "Total number of persisted deletions",
        "added": "7.0.0"
    },
    {
        "key": "ep_diskqueue_memory",
        "unit": "bytes",
        "description": "Total memory used in disk queue",
        "added": "7.0.0"
    },
    {
        "key": "ep_diskqueue_fill",
        "unit": "none",
        "description": "Total enqueued items on disk queue",
        "added": "7.0.0"
    },
    {
        "key": "ep_diskqueue_drain",
        "unit": "none",
        "description": "Total drained items on disk queue",
        "added": "7.0.0"
    },
    {
        "key": "ep_diskqueue_pending",
        "unit": "none",
        "description": "Total bytes of pending writes",
        "added": "7.0.0"
    },
    {
        "key": "ep_ht_item_memory",
        "unit": "bytes",
        "description": "The total byte size of all items, no matter the vbucket's state, no matter if an item's value is ejected. Tracks the same value as ep_total_cache_size",
        "added": "7.1.0"
    },
    {
        "key": "ep_meta_data_memory",
        "unit": "bytes",
        "description": "Total memory used by meta data, including the key",
        "added": "7.0.0"
    },
    {
        "key": "ep_meta_data_disk",
        "unit": "bytes",
        "description": "Estimate of how much metadata has been written to disk since startup",
        "added": "7.0.0"
    },
    {
        "key": "ep_checkpoint_memory",
        "unit": "bytes",
        "description": "Memory of items in all checkpoints",
        "added": "7.0.0"
    },
    {
        "key": "ep_checkpoint_memory_pending_destruction",
        "unit": "bytes",
        "description": "Memory of checkpoint structures awaiting destruction by a background task",
        "added": "7.1.0"
    },
    {
        "key": "ep_checkpoint_memory_quota",
        "unit": "bytes",
        "description": "Max allocation allowed in all checkpoints",
        "added": "7.1.0"
    },
    {
        "key": "ep_checkpoint_consumer_limit",
        "unit": "bytes",
        "description": "Max allocation allowed in all checkpoints (including the dcp consumer buffer quota)",
        "added": "7.6.2"
    },
    {
        "key": "ep_checkpoint_memory_recovery_upper_mark_bytes",
        "unit": "none",
        "description": "Fraction of the checkpoint quota (as computed by checkpoint_memory_ratio) that triggers attempt of memory releasing from checkpoint",
        "added": "7.1.0"
    },
    {
        "key": "ep_checkpoint_memory_recovery_lower_mark_bytes",
        "unit": "none",
        "description": "Fraction of the checkpoint quota (as computed by checkpoint_memory_ratio) that represents the target of checkpoint memory recovery. Memory recovery yields when reached",
        "added": "7.1.0"
    },
    {
        "key": "ep_total_cache_size",
        "unit": "bytes",
        "description": "The total byte size of all items, no matter the vbucket's state, no matter if an item's value is ejected. Tracks the same value as ep_ht_item_memory",
        "added": "7.0.0"
    },
    {
        "key": "rollback_item_count",
        "unit": "none",
        "description": "Num of items rolled back",
        "added": "7.0.0"
    },
    {
        "key": "ep_num_non_resident",
        "unit": "none",
        "description": "The number of non-resident items",
        "added": "7.0.0"
    },
    {
        "key": "ep_chk_persistence_remains",
        "unit": "none",
        "description": "Number of remaining vbuckets for checkpoint persistence",
        "added": "7.0.0"
    },
    {
        "key": "ep_hlc_drift",
        "unit": "microseconds",
        "cbstat": "ep_{state}_hlc_drift",
        "description": "The accumulated drift between this node's HLC and the remote node. For active vbucket's this represents the difference in CAS and local HLC for withMeta operations, for replica vbucket's this represents the difference in CAS and local HLC from DCP replication.",
        "added": "7.0.0"
    },
    {
        "key": "ep_hlc_drift_count",
        "unit": "none",
        "cbstat": "ep_{state}_hlc_drift_count",
        "description": "The accumulated number of times the corresponding kv_ep_hlc_drift_count has been updated",
        "added": "7.0.0"
    },
    {
        "key": "ep_ahead_exceptions",
        "unit": "none",
        "description": "Total number of times a vbucket saw an item with a HLC CAS from too far in the future (indicating the clock is behind)",
        "type": "counter",
        "cbstat": "ep_{state}_ahead_exceptions",
        "added": "7.0.0"
    },
    {
        "key": "ep_behind_exceptions",
        "unit": "none",
        "description": "Total number of times a vbucket saw an item with a HLC CAS from too far in the past (indicating the clock is ahead)",
        "type": "counter",
        "cbstat": "ep_{state}_behind_exceptions",
        "added": "7.0.0"
    },
    {
        "key": "ep_clock_cas_drift_threshold_exceeded",
        "unit": "none",
        "description": "ep_active_ahead_exceptions + ep_replica_ahead_exceptions",
        "added": "7.0.0"
    },
    {
        "key": "datatype_count",
        "unit": "none",
        "description": "Count of items in memory with a given datatype combination",
        "cbstat": "ep_{vbucket_state}_datatype_{datatype}",
        "added": "7.0.2"
    },
    {
        "key": "vb_auto_delete_count",
        "unit": "none",
        "cbstat": "vb_{state}_auto_delete_count",
        "prometheus": {
            "family": "vb_auto_delete_count"
        },
        "description": "Cumulative count of documents auto-deleted due to NRU ejection (Ephemeral Buckets only)",
        "added": "7.0.0"
    },
    {
        "key": "vb_ht_tombstone_purged_count",
        "unit": "none",
        "cbstat": "vb_{state}_ht_tombstone_purged_count",
        "prometheus": {
            "family": "vb_ht_tombstone_purged_count"
        },
        "description": "Number of purged tombstones (Ephemeral)",
        "added": "7.0.0"
    },
    {
        "key": "vb_seqlist_count",
        "unit": "none",
        "cbstat": "vb_{state}_seqlist_count",
        "prometheus": {
            "family": "vb_seqlist_count"
        },
        "description": "Number of items in the sequence list",
        "added": "7.0.0"
    },
    {
        "key": "vb_seqlist_deleted_count",
        "unit": "none",
        "cbstat": "vb_{state}_seqlist_deleted_count",
        "prometheus": {
            "family": "vb_seqlist_deleted_count"
        },
        "description": "Number of deleted items in the sequence list",
        "added": "7.0.0"
    },
    {
        "key": "vb_seqlist_purged_count",
        "unit": "none",
        "cbstat": "vb_{state}_seqlist_purged_count",
        "prometheus": {
            "family": "vb_seqlist_purged_count"
        },
        "description": "Number of tombstones purged from the sequence list",
        "added": "7.0.0"
    },
    {
        "key": "vb_seqlist_read_range_count",
        "unit": "none",
        "cbstat": "vb_{state}_seqlist_read_range_count",
        "prometheus": {
            "family": "vb_seqlist_read_range_count"
        },
        "description": "Number of sequence numbers visible according to the sequence list read range",
        "added": "7.0.0"
    },
    {
        "key": "vb_seqlist_stale_count",
        "unit": "none",
        "cbstat": "vb_{state}_seqlist_stale_count",
        "prometheus": {
            "family": "vb_seqlist_stale_count"
        },
        "description": "Number of stale items in the sequence list",
        "added": "7.0.0"
    },
    {
        "key": "vb_seqlist_stale_value_bytes",
        "unit": "bytes",
        "cbstat": "vb_{state}_seqlist_stale_value_bytes",
        "prometheus": {
            "family": "vb_seqlist_stale_value"
        },
        "description": "Total bytes of stale values in the sequence list",
        "added": "7.0.0"
    },
    {
        "key": "vb_seqlist_stale_metadata_bytes",
        "unit": "bytes",
        "cbstat": "vb_{state}_seqlist_stale_metadata_bytes",
        "prometheus": {
            "family": "vb_seqlist_stale_metadata"
        },
        "description": "Total bytes of stale metadata (key + fixed metadata) in the sequence list",
        "added": "7.0.0"
    },
    /* Ephemeral and replica-only */
    {
        "key": "ephemeral_vb_ht_memory",
        "unit": "bytes",
        "cbstat": "ht_mem_used_{state}",
        "prometheus": {
            "family": "ephemeral_vb_ht_memory"
        },
        "added": "7.6.0",
        "stability": "internal",
        "description": "Total memory used by HashTable items"
    },
    /* Ephemeral and replica-only */
    {
        "key": "ephemeral_vb_checkpoint_memory_overhead",
        "unit": "bytes",
        "cbstat": "{state}_checkpoint_memory_overhead",
        "prometheus": {
            "family": "ephemeral_vb_checkpoint_memory_overhead"
        },
        "added": "7.6.0",
        "stability": "internal",
        "description": "Total memory overhead of all checkpoints"
    },
    {
        "key": "connagg_connection_count",
        "unit": "none",
        "description": "Current number of DCP connections (Consumers or Producers)",
        "cbstat": "{connection_type}:count",
        "prometheus": {
            "family": "dcp_connection_count"
        },
        "added": "7.0.0"
    },
    {
        "key": "connagg_backoff",
        "unit": "none",
        "description": "Number of times Consumer DCP connections (i.e., replica) have paused consuming items because memory usage is too high",
        "cbstat": "{connection_type}:backoff",
        "prometheus": {
            "family": "dcp_backoff"
        },
        "added": "7.0.0"
    },
    {
        "family": "dcp_stream_count",
        "unit": "none",
        "description": "Current number of Streams (Active or Passive)"
    },
    {
        "key": "connagg_activestream_count",
        "unit": "none",
        "description": "Current number of ActiveStreams",
        "cbstat": "{connection_type}:activestream_count",
        "prometheus": {
            "family": "dcp_stream_count",
            "labels": {
                "for": "producer"
            }
        },
        "added": "7.6.0"
    },
    {
        "key": "connagg_passivestream_count",
        "unit": "none",
        "description": "Current number of PassiveStreams",
        "cbstat": "{connection_type}:passivestream_count",
        "prometheus": {
            "family": "dcp_stream_count",
            "labels": {
                "for": "consumer"
            }
        },
        "added": "7.6.0"
    },
    {
        "family": "dcp_count",
        "unit": "none",
        "description": "Current number of DCP connections"
    },
    {
        "key": "connagg_producer_count",
        "unit": "none",
        "description": "Current number of DCP Producer connections (outbound)",
        "cbstat": "{connection_type}:producer_count",
        "prometheus": {
            "family": "dcp_count",
            "labels": {
                "type": "producer"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "connagg_consumer_count",
        "unit": "none",
        "description": "Current number of DCP Consumer connections (inbound replication)",
        "cbstat": "{connection_type}:consumer_count",
        "prometheus": {
            "family": "dcp_count",
            "labels": {
                "type": "consumer"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "connagg_items_sent",
        "unit": "none",
        "description": "Total number of items sent out by all _currently existing_ outgoing DCP streams, since each stream was created",
        "cbstat": "{connection_type}:items_sent",
        "prometheus": {
            "family": "dcp_items_sent"
        },
        "added": "7.0.0"
    },
    {
        "key": "connagg_items_remaining",
        "unit": "none",
        "description": "Current total number of items remaining for to be sent for all outgoing DCP streams (approximate)",
        "cbstat": "{connection_type}:items_remaining",
        "prometheus": {
            "family": "dcp_items_remaining"
        },
        "added": "7.0.0"
    },
    {
        "key": "connagg_total_bytes",
        "unit": "bytes",
        "description": "Total data sent across all _existing_ DCP connections",
        "cbstat": "{connection_type}:total_bytes",
        "prometheus": {
            "family": "dcp_total_data_size"
        },
        "added": "7.0.0"
    },
    {
        "key": "connagg_total_uncompressed_data_size",
        "unit": "bytes",
        "description": "Total equivalent uncompressed size of data sent across all _existing_ DCP connections",
        "cbstat": "{connection_type}:total_uncompressed_data_size",
        "prometheus": {
            "family": "dcp_total_uncompressed_data_size"
        },
        "added": "7.0.0"
    },
    {
        "key": "connagg_ready_queue_bytes",
        "unit": "bytes",
        "description": "Estimated memory usage of items waiting to be sent across all _existing_ DCP connections",
        "cbstat": "{connection_type}:ready_queue_bytes",
        "prometheus": {
            "family": "dcp_ready_queue_size"
        },
        "added": "7.1.0"
    },
        {
        "key": "connagg_paused",
        "unit": "none",
        "description": "Count of how many times the DCP connection has been paused",
        "cbstat": "{connection_type}:paused_count",
        "prometheus": {
            "family": "dcp_paused_count"
        },
        "added": "7.6.0"
    },
    {
        "key": "connagg_unpaused",
        "unit": "none",
        "description": "Count of how many times the DCP connection has been unpaused",
        "cbstat": "{connection_type}:unpaused_count",
        "prometheus": {
            "family": "dcp_unpaused_count"
        },
        "added": "7.6.0"
    },
    {
        "family": "dcp_items_backfilled",
        "unit": "none",
        "description": "Number of items pushed into the DCP stream ready queue from a backfill"
    },
    {
        "key": "connagg_items_backfilled_disk",
        "unit": "none",
        "cbstat": "{connection_type}:items_backfilled_disk",
        "description": "Number of items pushed into the DCP stream ready queue from a backfill",
        "prometheus": {
            "family": "dcp_items_backfilled",
             "labels": {
                "from": "disk"
            }
        },
        "added": "7.2.1"
    },
    {
        "key": "connagg_items_backfilled_memory",
        "unit": "none",
        "cbstat": "{connection_type}:items_backfilled_memory",
        "description": "Number of items pushed into the DCP stream ready queue from a backfill",
        "prometheus": {
            "family": "dcp_items_backfilled",
             "labels": {
                "from": "memory"
            }
        },
        "added": "7.2.1"
    },
/*
 * Aggregated dcp stats (for all DCP clients).
 * These are not included in Prometheus as they are redundant - they
 * are the sum of per- `connection_type` stats (e.g. connagg_producer_count,
 * connagg_items_sent, ...)
 */
    {
        "key": "dcp_count",
        "unit": "none",
        "cbstat": "ep_dcp_count",
        "prometheus": false,
        "added": "7.0.2"
    },
    {
        "key": "dcp_consumer_count",
        "unit": "none",
        "cbstat": "ep_dcp_consumer_count",
        "prometheus": false,
        "added": "7.0.2"
    },
    {
        "key": "dcp_producer_count",
        "unit": "none",
        "cbstat": "ep_dcp_producer_count",
        "prometheus": false,
        "added": "7.0.2"
    },
    {
        "key": "dcp_total_data_size",
        "unit": "bytes",
        "cbstat": "ep_dcp_total_bytes",
        "prometheus": false,
        "added": "7.0.2"
    },
    {
        "key": "dcp_total_uncompressed_data_size",
        "unit": "bytes",
        "cbstat": "ep_dcp_total_uncompressed_data_size",
        "prometheus": false,
        "added": "7.0.2"
    },
    {
        "key": "dcp_queue_fill",
        "unit": "none",
        "description": "Number of items ever queued to send across all _existing_ DCP connections",
        "cbstat": "ep_dcp_queue_fill",
        "prometheus": false,
        "added": "7.0.2"
    },
    {
        "key": "dcp_items_sent",
        "unit": "none",
        "cbstat": "ep_dcp_items_sent",
        "prometheus": false,
        "added": "7.0.2"
    },
    {
        "key": "dcp_items_remaining",
        "unit": "none",
        "cbstat": "ep_dcp_items_remaining",
        "prometheus": false,
        "added": "7.0.2"
    },
    {
        "key": "dcp_queue_backfill_disk",
        "unit": "none",
        "cbstat": "ep_dcp_backfill_disk",
        "prometheus": false,
        "added": "7.2.1"
    },
    {
        "key": "dcp_queue_backfill_memory",
        "unit": "none",
        "cbstat": "ep_dcp_backfill_memory",
        "prometheus": false,
        "added": "7.2.1"
    },
    {
        "key": "dcp_num_running_backfills",
        "unit": "none",
        "cbstat": "ep_dcp_num_running_backfills",
        "description": "Total number of running backfills across all DCP connections",
        "added": "7.0.2"
    },
    {
        "key": "dcp_max_running_backfills",
        "unit": "none",
        "cbstat": "ep_dcp_max_running_backfills",
        "description": "Maximum number of backfills across all DCP connections",
        "added": "7.0.2"
    },
    {
        "key": "manifest_uid",
        "unit": "none",
        "prometheus": false,
        "description": "The uid of the last manifest accepted from the cluster, only returned when all scopes are requested (no name or id provided)",
        "added": "7.0.0"
    },
    {
        "key": "collection_name",
        "unit": "none",
        "cbstat": "name",
        "prometheus": false,
        "added": "7.0.0"
    },
    {
        "key": "collection_scope_name",
        "unit": "none",
        "cbstat": "scope_name",
        "prometheus": false,
        "added": "7.0.0"
    },
    {
        "key": "collection_maxTTL",
        "unit": "seconds",
        "description": "Per-collection maxTTL (maximum expiry) if configured",
        "cbstat": "maxTTL",
        "added": "7.0.0"
    },
    {
        "key": "collection_history",
        "unit": "none",
        "description": "Whether history (CDC) is enabled for each collection",
        "cbstat": "history",
        "added": "7.2.0"
    },
    {
        "key": "collection_metered",
        "unit": "none",
        "cbstat": "metered",
        "description": "Whether metering is enabled for the collection",
        "added": "7.6.0",
        "stability": "internal"
    },
    {
        "key": "collection_flush_uid",
        "unit": "none",
        "cbstat": "flush_uid",
        "description": "The last manifest-uid triggering a flush",
        "added": "8.0.0",
        "stability": "internal"
    },
    {
        "key": "scope_name",
        "unit": "none",
        "cbstat": "name",
        "prometheus": false,
        "added": "7.0.0"
    },
    {
        "key": "scope_collection_count",
        "unit": "none",
        "cbstat": "collections",
        "description": "Number of collections in the scope",
        "prometheus": false,
        "added": "7.0.0"
    },
    {
        "key": "collection_mem_used",
        "unit": "bytes",
        "description": "Per-collection memory usage for active vbuckets only",
        "cbstat": "collections_mem_used",
        "added": "7.0.0"
    },
    {
        "key": "collection_item_count",
        "unit": "none",
        "description": "Per-collection item count for active vbuckets only",
        "cbstat": "items",
        "added": "7.0.0"
    },
    {
        "key": "collection_data_size",
        "unit": "bytes",
        "description": "Per-collection data size on disk for active vbuckets only",
        "cbstat": "data_size",
        "added": "7.0.0"
    },
    {
        "family": "collection_ops",
        "unit": "none",
        "description": "Per-collection counters of sets/gets/deletes for active vbuckets only"
    },
    {
        "key": "collection_ops_store",
        "unit": "none",
        "description": "Per-collection counters of sets/gets/deletes for active vbuckets only",
        "type": "counter",
        "cbstat": "ops_store",
        "prometheus": {
            "family": "collection_ops",
            "labels": {
                "op": "store"
            }
        },
        "added": "7.0.0"
    },
    {
        "key": "collection_ops_delete",
        "unit": "none",
        "cbstat": "ops_delete",
        "prometheus": {
            "family": "collection_ops",
            "labels": {
                "op": "delete"
            }
        },
        "description": "Per-collection counters of sets/gets/deletes for active vbuckets only",
        "type": "counter",
        "added": "7.0.0"
    },
    {
        "key": "collection_ops_get",
        "unit": "none",
        "description": "Per-collection counters of sets/gets/deletes for active vbuckets only",
        "type": "counter",
        "cbstat": "ops_get",
        "prometheus": {
            "family": "collection_ops",
            "labels": {
                "op": "get"
            }
        },
        "added": "7.0.0"
    },
    // Metering
    {
        "key": "boot_timestamp",
        "unit": "seconds",
        "type": "gauge",
        "description": "The time KV last restarted (and counters reset)",
        "added": "7.6.0",
        "stability": "internal"
    },
    {
        "key": "meter_ru_total",
        "unit": "none",
        "type": "counter",
        "description": "Total Read Units used by a bucket since reset",
        "added": "7.6.0",
        "stability": "internal"
    },
    {
        "key": "meter_wu_total",
        "unit": "none",
        "type": "counter",
        "description": "Total Write Units used by a bucket since reset",
        "added": "7.6.0",
        "stability": "internal"
    },
    {
        "key": "meter_cu_total",
        "unit": "none",
        "type": "counter",
        "description": "Total Compute Units used by a bucket since reset",
        "added": "7.6.0",
        "stability": "internal"
    },
    {
        "key": "op_count_total",
        "unit": "none",
        "type": "counter",
        "description": "Total operations successfully executed for a bucket since reset",
        "added": "7.6.0",
        "stability": "internal"
    },
    {
        "key": "credit_ru_total",
        "unit": "none",
        "type": "counter",
        "description": "Total Read Units refunded for a bucket (RU was charged, but operation failed) since reset",
        "added": "7.6.0",
        "stability": "internal"
    },
    {
        "key": "credit_wu_total",
        "unit": "none",
        "type": "counter",
        "description": "Total Write Units refunded for a bucket (WU was charged, but operation failed) since reset",
        "added": "7.6.0",
        "stability": "internal"
    },
    {
        "key": "credit_cu_total",
        "unit": "none",
        "type": "counter",
        "description": "Total Compute Units refunded for a bucket (CU was charged, but operation failed) since reset",
        "added": "7.6.0",
        "stability": "internal"
    },
    {
        "key": "reject_count_total",
        "unit": "none",
        "type": "counter",
        "description": "Total number of operations rejected for a bucket since reset (e.g., invalid operations)",
        "added": "7.6.0",
        "stability": "internal"
    },
    {
        "key": "throttle_seconds_total",
        "unit": "none",
        "type": "counter",
        "description": "Total time spent throttling requests for a bucket since reset",
        "added": "7.6.0",
        "stability": "internal"
    },
    {
        "key": "throttle_count_total",
        "unit": "none",
        "type": "counter",
        "description": "Total number of times requests have been throttled for a bucket since reset",
        "added": "7.6.0",
        "stability": "internal"
    },
    {
        "key": "storage",
        "unit": "bytes",
        "type": "gauge",
        "description": "Total bytes on disk used by a bucket",
        "added": "7.6.0",
        "stability": "internal"
    },

    {
        "key": "logical_data_size",
        "cbstat": "vb_{state}_logical_data_size",
        "unit": "bytes",
        "description": "The logical size of all user data on disk (per-bucket), with compression applied",
        "added": "7.6.0"
    },
    {
        "key": "conflicts_resolved",
        "cbstat": "ep_conflicts_resolved_{op}_{result}",
        "unit": "none",
        "type": "counter",
        "description": "Counter of all SetWithMeta/DelWithMeta conflict resolution results. The result may be that the incoming operation was: accepted as it is 'ahead', rejected as it is 'behind', or rejected as it appears identical (by metadata, not comparing document bodies)",
        "added": "7.2.0"
    },
    {
        "key": "ep_bg_fetched_compaction",
        "cbstat": "ep_bg_fetched_compaction",
        "unit": "none",
        "type": "counter",
        "description": "The number of bgfetches which are triggered by compaction",
        "added": "7.1.5"
    }
]
