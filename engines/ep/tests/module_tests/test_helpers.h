/* -*- Mode: C++; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */
/*
 *     Copyright 2016-Present Couchbase, Inc.
 *
 *   Use of this software is governed by the Business Source License included
 *   in the file licenses/BSL-Couchbase.txt.  As of the Change Date specified
 *   in that file, in accordance with the Business Source License, use of this
 *   software will be governed by the Apache License, Version 2.0, included in
 *   the file licenses/APL2.txt.
 */

/*
 * Helper functions / code for unit tests
 */

#pragma once

#include "diskdockey.h"
#include "ep_types.h"
#include "hash_table.h"
#include "objectregistry.h"
#include "stored_value_factories.h"

#include <memcached/durability_spec.h>
#include <memcached/protocol_binary.h>
#include <memcached/storeddockey.h>

#include <chrono>

// A Couchbase-specific version of the standard GTest SCOPED_TRACE macro -
// from the SCOPED_TRACE description:
//     Causes a trace (including the source file path, the current line
//     number, and the given message) to be included in every test failure
//     message generated by code in the current scope.  The effect is
//     undone when the control leaves the current scope.
//
// Our version addresses an incompatibility between vanilla SCOPED_TRACE and our
// bucket memory tracking (ObjectRegistry), which results in "leaked"
// allocations made by CB_SCOPED_TRACE internally being accounted to the current
// engine, resulting in EpEngine instances reporting non-zero memory usage
// when we destruct them - mkaing it appear like we haven't accounted memory
// correctly.
// This occurs because SCOPED_TRACE internally uses a thread-local std::vector
// of in-scope TraceInfo objects. While it _does_ delete the TraceInfo objects
// when they go out of scope (i.e. by the time the test ends and we destroy the
// EpEngine instance), the underlying std::vector is not deleted and hence may
// still have memory used for the underlying dynamic array. We solve the issue
// by switching away from the current engine before declaring the ScopedTrace
// object, then switching back after creating it - this ensures the allocation
// of the TraceInfo object and the std::vector memory is done against the
// "no-bucket", and doesn't pollute the current EpEngine instance.
#define CB_SCOPED_TRACE(message)                                        \
    auto* GTEST_CONCAT_TOKEN_(cb_scoped_trace_, __LINE__) =             \
            ObjectRegistry::onSwitchThread(nullptr, true);              \
    ::testing::ScopedTrace GTEST_CONCAT_TOKEN_(gtest_trace_, __LINE__)( \
            __FILE__, __LINE__, (message));                             \
    ObjectRegistry::onSwitchThread(                                     \
            GTEST_CONCAT_TOKEN_(cb_scoped_trace_, __LINE__))

#undef SCOPED_TRACE
#define SCOPED_TRACE(m)                                                       \
    static_assert(false,                                                      \
                  "SCOPED_TRACE() macro is incompatible with ObjectRegistry " \
                  "memory tracking. Use CB_SCOPED_TRACE() instead.");

// The way magma set its memory quota is to use 10% of the
// max_size per shard. Set this to allow for 3MB per shard assuming
// there are 4 shards.
// 3145728 * 4 / 0.1 = 125829120
static std::string magmaConfig =
        "max_size=125829120;"
        "magma_flusher_thread_percentage=50";

// When a test needs to do a rollback, we need to configure magma
// to generate a rollback point with each item batch, similar to what
// couchstore does.
static std::string magmaRollbackConfig =
        "magma_max_checkpoints=10;"
        "magma_checkpoint_interval=0;"
        "magma_min_checkpoint_interval=0;"
        "magma_sync_every_batch=true";

class VBucket;

/// Creates an item with the given vbucket id, key and value.
Item make_item(
        Vbid vbid,
        const DocKeyView& key,
        const std::string& value,
        uint32_t exptime = 0,
        protocol_binary_datatype_t datatype = PROTOCOL_BINARY_DATATYPE_JSON);

/// Make a queued_item representing a pending SyncWrite.
queued_item makePendingItem(StoredDocKey key,
                            const std::string& value,
                            cb::durability::Requirements reqs = {
                                    cb::durability::Level::Majority,
                                    cb::durability::Timeout()});

queued_item makeAbortedItem(StoredDocKey key, const std::string& value);

/// Make a queued_item representing a commited (normal mutation).
queued_item makeCommittedItem(StoredDocKey key,
                              std::string value,
                              Vbid vbid = Vbid(0));

/// Make a queued_item representing a commited SyncWrite.
queued_item makeCommittedviaPrepareItem(StoredDocKey key, std::string value);

/// Make a queued_item representing a deletion.
queued_item makeDeletedItem(StoredDocKey key);

std::unique_ptr<Item> makeCompressibleItem(Vbid vbid,
                                           const DocKeyView& key,
                                           const std::string& value,
                                           protocol_binary_datatype_t datatype,
                                           bool shouldCompress,
                                           bool makeXattrBody = false);

/**
 * Create a StoredDocKey object from a std::string.
 * By default places the key in the default namespace,
 * CollectionID::Default.
 */
StoredDocKey makeStoredDocKey(const std::string& string,
                              CollectionID ns = CollectionID::Default);

/**
 * Create a DiskDocKey object from a std::string.
 * By default places the key in the default namespace,
 * CollectionID::Default.
 */
DiskDocKey makeDiskDocKey(const std::string& string,
                          bool prepare = false,
                          CollectionID ns = CollectionID::Default);

// Creates a new item with the given key and queues it into the given VBucket.
// manager.
bool queueNewItem(VBucket& vbucket, DocKeyView key);

/**
 * Create an XATTR document using the supplied string as the body
 * @returns string containing the new value
 */
std::string createXattrValue(const std::string& body,
                             bool withSystemKey = true,
                             bool makeItSnappy = false);

/**
 * Class which moves time forward when created by the given amount, and upon
 * destruction returns time to where it was.
 *
 * Allows tests to manipulate server time, but need to ensure any adjustments
 * are restored so as to not affect other later tests.
 */
class TimeTraveller {
public:
    explicit TimeTraveller(int by);

    ~TimeTraveller();

    int get() const {
        return by;
    }

private:
    // Amount of time travel.
    int by;
};

/**
 * Rewrite the vbstate of the vbucket/revision
 * i.e. the file @ dbDir/<vbid>.couch.<revision>
 * This method makes the vbstate appear to be from the past so we can test
 * some upgrade scenarios.
 */
void rewriteCouchstoreVBState(Vbid vbucket,
                              const std::string& dbDir,
                              int revision,
                              bool namespacesSupported = true);

// Return a string suitable for a database directory path, based on the
// current running GoogleTest.
std::string getProcessUniqueDatabaseName();

/**
 * Modify the vbstate of the vbucket/revision
 * i.e. the file @ dbDir/<vbid>.couch.<revision>
 * @param vBucket Vbucket ID
 * @param dbDir Directory the couchstore file resides
 * @param revision of the file to modify
 * @param modifyFn Callback which is invoked on the current vbState JSON value.
 *        The updated JSON object is written back to disk.
 *
 * This method allows the '_local/vbstate' on-disk document to be arbitrarily
 * modified, for example for upgrade or error-injection tests.
 */
void modifyCouchstoreVBState(
        Vbid vbucket,
        const std::string& dbDir,
        int revision,
        std::function<void(nlohmann::json& vbState)> modifyFn);

/**
 * Removes the given path if it exists, NOP otherwise.
 *
 * @param path
 * @throws std::system_error If the removal fails for reason other than ENOENT
 */
void removePathIfExists(const std::string& path);

/**
 * Get the bucket type from the config string
 *
 * @param config Test config string
 * @return Bucket type
 */
std::string getBucketType(std::string_view config);

/**
 * Generate a bucket type + bucket backend config string from the test config
 * string
 *
 * e.g. "persistent_couchstore" -> "bucketType=persistent;backend=couchdb"
 * e.g. "persistent_magma" -> "bucketType=persistent;backend=magma"
 * e.g. "ephemeral" -> "bucketType=ephemeral"
 *
 * @param config Test config string
 * @return Bucket config string
 */
std::string generateBucketTypeConfig(std::string_view config);

/**
 * Generate a bucket backend config string from the test config string
 *
 * e.g. "persistent_couchstore" -> "backend=couchdb"
 * e.g. "persistent_magma" -> "backend=magma"
 * e.g. "ephemeral" -> throws
 *
 * @param config Test config string
 * @return Bucket config string
 * @throws invalid_argument if not a persistent bucket type
 */
std::string generateBackendConfig(std::string_view config);

/**
 * Generates a config string for NexusKVStore usage from the testConfig
 *
 * @param config config for the test
 * @return config string
 */
std::string generateNexusConfig(std::string_view testConfig);

/**
 * Sanitizes a config string parameter that we use to config GTest parameterized
 * test suites. We need to sanitize the parameter string as GTest does not allow
 * ';' characters in parameters but we use them in configuration.json config so
 * our parameters use ':' as a placeholder. We also replace "couchstore" with
 * "couchdb".
 *
 * @param config for the test
 * @return config string
 */
std::string sanitizeTestParamConfigString(std::string_view config);

StoredValue* forceInsert(HashTable& ht,
                         const HashTable::HashBucketLock& hbl,
                         const StoredValue& value);

void removeIfExists(HashTable& ht,
                    const HashTable::HashBucketLock& hbl,
                    const DocKeyView& value);

namespace cb::testing::sv {

/// Whether there is a value.
enum HasValue { No, Yes, Any };
std::vector<HasValue> hasValueValues(HasValue hasValue);

/// Whether the value is resident.
enum class Resident { No, Yes, Any };
std::vector<Resident> residentValues(Resident resident);

/// Sets the clean/dirty flag.
enum class Persisted { No, Yes, Any };
std::vector<Persisted> persistedValues(Persisted persisted);

/// Sets the deleted flag.
enum class Deleted { No, Yes, Any };
std::vector<Deleted> deletedValues(Deleted deleted);

enum class Expired { No, Yes, Any };
std::vector<Expired> expiredValues(Expired expired);

enum class Locked { No, Yes, Any };
std::vector<Locked> lockedValues(Locked locked);

std::vector<protocol_binary_datatype_t> datatypeValues(
        protocol_binary_datatype_t datatype);

/// Sets the states distiniguished by special seqno values.
enum class State {
    Document = 0b0001,
    TempInitial = 0b0010,
    TempDeleted = 0b0100,
    TempNonExistent = 0b1000,
    Temp = TempInitial | TempDeleted | TempNonExistent,
    Any = Document | TempInitial | TempDeleted | TempNonExistent,
};
std::vector<State> stateValues(State state);

/**
 * Creates an [Ordered]StoredValue from the given factory and with the given
 * properties.
 * Note that none of the values are allowed to be 'Any'.
 */
StoredValue::UniquePtr createWithFactory(AbstractStoredValueFactory& factory,
                                         const DocKeyView& key,
                                         State state,
                                         HasValue value,
                                         protocol_binary_datatype_t datatype,
                                         Resident resident,
                                         Persisted persisted,
                                         Deleted deleted,
                                         Expired expired,
                                         Locked locked);

/**
 * Creates a StoredValue from the default factory and with the given properties.
 * Note that none of the values are allowed to be 'Any'.
 */
StoredValue::UniquePtr create(const DocKeyView& key,
                              State state,
                              HasValue value,
                              protocol_binary_datatype_t datatype,
                              Resident resident,
                              Persisted persisted,
                              Deleted deleted,
                              Expired expired,
                              Locked locked);

/**
 * Creates all possible types of StoredValues matching the given properties.
 * Note this is a very large number of combinations - 115 currently.
 */
std::vector<StoredValue::UniquePtr> createAllWithFactory(
        AbstractStoredValueFactory& factory,
        const DocKeyView& key,
        State state = State::Any,
        HasValue value = HasValue::Any,
        protocol_binary_datatype_t datatype = cb::mcbp::datatype::highest,
        Resident resident = Resident::Any,
        Persisted persisted = Persisted::Any,
        Deleted deleted = Deleted::Any,
        Expired expired = Expired::Any,
        Locked locked = Locked::Any);

/**
 * Creates all possible types of StoredValues matching the given properties.
 * Note this is a very large number of combinations - 115 currently.
 */
std::vector<StoredValue::UniquePtr> createAll(
        const DocKeyView& key,
        State state = State::Any,
        HasValue value = HasValue::Any,
        protocol_binary_datatype_t datatype = cb::mcbp::datatype::highest,
        Resident resident = Resident::Any,
        Persisted persisted = Persisted::Any,
        Deleted deleted = Deleted::Any,
        Expired expired = Expired::Any,
        Locked locked = Locked::Any);
} // namespace cb::testing::sv
