#!/usr/bin/env python3

#   Copyright 2022-Present Couchbase, Inc.
#
#   Use of this software is governed by the Business Source License included
#   in the file licenses/BSL-Couchbase.txt.  As of the Change Date specified
#   in that file, in accordance with the Business Source License, use of this
#   software will be governed by the Apache License, Version 2.0, included in
#   the file licenses/APL2.txt.
#

"""Rebases timestamps in traces generated by kv_slow_ops_2_gtrace,
placing slow op traces from different nodes on the same uniform timeline.

This expects that kv_slow_ops_2_gtrace is being piped grep output from files from the root of a
log collection folder, containing individual nodes' logs in folders prefixed with cbcollect, e.g.
    cbcollect_info_ns_1@10.147.18.63_20220722-111444

Usage:
    grep 'Slow op' */memcached.log | kv_slow_ops_2_gtrace | rebase_gtrace_ts  > trace.json
"""

import sys
import json
from datetime import datetime as dt

events = json.loads(sys.stdin.read())
nodes = dict()

# Find the earliest recorded event per node
for event in events:
    if 'time' not in event['args']:
        continue
    node = event['args']['node']
    ts = event['ts']
    # Store timestamp if it is smallest, or it isn't set
    if (node not in nodes) or ts < nodes[node][0]:
        nodes[node] = (ts, event['args']['time'])

# Convert logged time to a timestamp in s
nodes = {node: (ts, dt.fromisoformat(time).timestamp())
         for node, (ts, time) in nodes.items()}
# Find smallest timestamp
floor = min(nodes.values(), key=lambda x: x[1])[1]
# Rebase timestamp and convert to ms
nodes = {node: (ts, (time - floor) * 1000000)
         for node, (ts, time) in nodes.items()}

# Rebase timestamps for all nodes
out = list()
for event in events:
    offset, timestamp = nodes[event['args']['node']]
    event['ts'] = timestamp + event['ts'] - offset
    out.append(event)

print(json.dumps(out, indent=2))
