//
//     Copyright 2019-Present Couchbase, Inc.
//
//   Use of this software is governed by the Business Source License included
//   in the file licenses/BSL-Couchbase.txt.  As of the Change Date specified
//   in that file, in accordance with the Business Source License, use of this
//   software will be governed by the Apache License, Version 2.0, included in
//   the file licenses/APL2.txt.
//

// Schema for data that at least couch-kvstore stores in order to maintain the
// collections/kvstore.h objects.

// Note from flatbuffers documentation these are the sizes of the types
//  * 8 bit: byte, ubyte, bool
//  * 16 bit: short, ushort
//  * 32 bit: int, uint, float
//  * 64 bit: long, ulong, double

namespace Collections.KVStore;

// Metadata for a single collection
table Collection {
    // The following fields all exist with the "epoch" of collections, 7.0+
    startSeqno:ulong;
    scopeId:uint;
    collectionId:uint;
    // The TTL is optional, ttlValid determines if the value of ttl should be
    // used when processing new items.
    ttlValid:bool;
    maxTtl:uint;
    name:string;
    // All fields after here are added from 7.2
    //
    // history: MB-54516: added in neo (7.2) branch. If this field is not part
    // of a Collection structure it is defaulted to false.
    history:bool = false;
}

// All of the open collections
table OpenCollections {
    // The open collection entries
    entries:[Collection];
}

// Metadata for a single scope
table Scope {
    startSeqno:ulong;
    scopeId:uint;
    name:string;
}

// All of the open scopes
table Scopes {
    entries:[Scope];
}

table Dropped {
    startSeqno:ulong;
    endSeqno:ulong;
    collectionId:uint;
}

// The collections which are dropped but not completely purged from storage
table DroppedCollections {
    entries:[Dropped];
}

table CommittedManifest {
    uid:ulong;
}

root_type OpenCollections;
root_type DroppedCollections;
root_type Scopes;
root_type CommittedManifest;